// This file is generated by rust-protobuf 2.2.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct std_frame {
    // message fields
    address: ::std::option::Option<u64>,
    thread_id: ::std::option::Option<u64>,
    rawbytes: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    operand_pre_list: ::protobuf::SingularPtrField<operand_value_list>,
    operand_post_list: ::protobuf::SingularPtrField<operand_value_list>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl std_frame {
    pub fn new() -> std_frame {
        ::std::default::Default::default()
    }

    // required uint64 address = 1;

    pub fn clear_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: u64) {
        self.address = ::std::option::Option::Some(v);
    }

    pub fn get_address(&self) -> u64 {
        self.address.unwrap_or(0)
    }

    // required uint64 thread_id = 2;

    pub fn clear_thread_id(&mut self) {
        self.thread_id = ::std::option::Option::None;
    }

    pub fn has_thread_id(&self) -> bool {
        self.thread_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thread_id(&mut self, v: u64) {
        self.thread_id = ::std::option::Option::Some(v);
    }

    pub fn get_thread_id(&self) -> u64 {
        self.thread_id.unwrap_or(0)
    }

    // required bytes rawbytes = 3;

    pub fn clear_rawbytes(&mut self) {
        self.rawbytes.clear();
    }

    pub fn has_rawbytes(&self) -> bool {
        self.rawbytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rawbytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.rawbytes = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rawbytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.rawbytes.is_none() {
            self.rawbytes.set_default();
        }
        self.rawbytes.as_mut().unwrap()
    }

    // Take field
    pub fn take_rawbytes(&mut self) -> ::std::vec::Vec<u8> {
        self.rawbytes.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_rawbytes(&self) -> &[u8] {
        match self.rawbytes.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // required .operand_value_list operand_pre_list = 4;

    pub fn clear_operand_pre_list(&mut self) {
        self.operand_pre_list.clear();
    }

    pub fn has_operand_pre_list(&self) -> bool {
        self.operand_pre_list.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operand_pre_list(&mut self, v: operand_value_list) {
        self.operand_pre_list = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_operand_pre_list(&mut self) -> &mut operand_value_list {
        if self.operand_pre_list.is_none() {
            self.operand_pre_list.set_default();
        }
        self.operand_pre_list.as_mut().unwrap()
    }

    // Take field
    pub fn take_operand_pre_list(&mut self) -> operand_value_list {
        self.operand_pre_list.take().unwrap_or_else(|| operand_value_list::new())
    }

    pub fn get_operand_pre_list(&self) -> &operand_value_list {
        self.operand_pre_list.as_ref().unwrap_or_else(|| operand_value_list::default_instance())
    }

    // optional .operand_value_list operand_post_list = 5;

    pub fn clear_operand_post_list(&mut self) {
        self.operand_post_list.clear();
    }

    pub fn has_operand_post_list(&self) -> bool {
        self.operand_post_list.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operand_post_list(&mut self, v: operand_value_list) {
        self.operand_post_list = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_operand_post_list(&mut self) -> &mut operand_value_list {
        if self.operand_post_list.is_none() {
            self.operand_post_list.set_default();
        }
        self.operand_post_list.as_mut().unwrap()
    }

    // Take field
    pub fn take_operand_post_list(&mut self) -> operand_value_list {
        self.operand_post_list.take().unwrap_or_else(|| operand_value_list::new())
    }

    pub fn get_operand_post_list(&self) -> &operand_value_list {
        self.operand_post_list.as_ref().unwrap_or_else(|| operand_value_list::default_instance())
    }
}

impl ::protobuf::Message for std_frame {
    fn is_initialized(&self) -> bool {
        if self.address.is_none() {
            return false;
        }
        if self.thread_id.is_none() {
            return false;
        }
        if self.rawbytes.is_none() {
            return false;
        }
        if self.operand_pre_list.is_none() {
            return false;
        }
        for v in &self.operand_pre_list {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.operand_post_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.address = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.thread_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.rawbytes)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.operand_pre_list)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.operand_post_list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.address {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.thread_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.rawbytes.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(ref v) = self.operand_pre_list.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.operand_post_list.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.address {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.thread_id {
            os.write_uint64(2, v)?;
        }
        if let Some(ref v) = self.rawbytes.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(ref v) = self.operand_pre_list.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.operand_post_list.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> std_frame {
        std_frame::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "address",
                    |m: &std_frame| { &m.address },
                    |m: &mut std_frame| { &mut m.address },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "thread_id",
                    |m: &std_frame| { &m.thread_id },
                    |m: &mut std_frame| { &mut m.thread_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "rawbytes",
                    |m: &std_frame| { &m.rawbytes },
                    |m: &mut std_frame| { &mut m.rawbytes },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<operand_value_list>>(
                    "operand_pre_list",
                    |m: &std_frame| { &m.operand_pre_list },
                    |m: &mut std_frame| { &mut m.operand_pre_list },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<operand_value_list>>(
                    "operand_post_list",
                    |m: &std_frame| { &m.operand_post_list },
                    |m: &mut std_frame| { &mut m.operand_post_list },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<std_frame>(
                    "std_frame",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static std_frame {
        static mut instance: ::protobuf::lazy::Lazy<std_frame> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const std_frame,
        };
        unsafe {
            instance.get(std_frame::new)
        }
    }
}

impl ::protobuf::Clear for std_frame {
    fn clear(&mut self) {
        self.clear_address();
        self.clear_thread_id();
        self.clear_rawbytes();
        self.clear_operand_pre_list();
        self.clear_operand_post_list();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for std_frame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for std_frame {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct operand_value_list {
    // message fields
    elem: ::protobuf::RepeatedField<operand_info>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl operand_value_list {
    pub fn new() -> operand_value_list {
        ::std::default::Default::default()
    }

    // repeated .operand_info elem = 1;

    pub fn clear_elem(&mut self) {
        self.elem.clear();
    }

    // Param is passed by value, moved
    pub fn set_elem(&mut self, v: ::protobuf::RepeatedField<operand_info>) {
        self.elem = v;
    }

    // Mutable pointer to the field.
    pub fn mut_elem(&mut self) -> &mut ::protobuf::RepeatedField<operand_info> {
        &mut self.elem
    }

    // Take field
    pub fn take_elem(&mut self) -> ::protobuf::RepeatedField<operand_info> {
        ::std::mem::replace(&mut self.elem, ::protobuf::RepeatedField::new())
    }

    pub fn get_elem(&self) -> &[operand_info] {
        &self.elem
    }
}

impl ::protobuf::Message for operand_value_list {
    fn is_initialized(&self) -> bool {
        for v in &self.elem {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.elem)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.elem {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.elem {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> operand_value_list {
        operand_value_list::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<operand_info>>(
                    "elem",
                    |m: &operand_value_list| { &m.elem },
                    |m: &mut operand_value_list| { &mut m.elem },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<operand_value_list>(
                    "operand_value_list",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static operand_value_list {
        static mut instance: ::protobuf::lazy::Lazy<operand_value_list> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const operand_value_list,
        };
        unsafe {
            instance.get(operand_value_list::new)
        }
    }
}

impl ::protobuf::Clear for operand_value_list {
    fn clear(&mut self) {
        self.clear_elem();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for operand_value_list {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for operand_value_list {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct operand_info {
    // message fields
    operand_info_specific: ::protobuf::SingularPtrField<operand_info_specific>,
    bit_length: ::std::option::Option<i32>,
    operand_usage: ::protobuf::SingularPtrField<operand_usage>,
    taint_info: ::protobuf::SingularPtrField<taint_info>,
    value: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl operand_info {
    pub fn new() -> operand_info {
        ::std::default::Default::default()
    }

    // required .operand_info_specific operand_info_specific = 1;

    pub fn clear_operand_info_specific(&mut self) {
        self.operand_info_specific.clear();
    }

    pub fn has_operand_info_specific(&self) -> bool {
        self.operand_info_specific.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operand_info_specific(&mut self, v: operand_info_specific) {
        self.operand_info_specific = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_operand_info_specific(&mut self) -> &mut operand_info_specific {
        if self.operand_info_specific.is_none() {
            self.operand_info_specific.set_default();
        }
        self.operand_info_specific.as_mut().unwrap()
    }

    // Take field
    pub fn take_operand_info_specific(&mut self) -> operand_info_specific {
        self.operand_info_specific.take().unwrap_or_else(|| operand_info_specific::new())
    }

    pub fn get_operand_info_specific(&self) -> &operand_info_specific {
        self.operand_info_specific.as_ref().unwrap_or_else(|| operand_info_specific::default_instance())
    }

    // required sint32 bit_length = 2;

    pub fn clear_bit_length(&mut self) {
        self.bit_length = ::std::option::Option::None;
    }

    pub fn has_bit_length(&self) -> bool {
        self.bit_length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bit_length(&mut self, v: i32) {
        self.bit_length = ::std::option::Option::Some(v);
    }

    pub fn get_bit_length(&self) -> i32 {
        self.bit_length.unwrap_or(0)
    }

    // required .operand_usage operand_usage = 3;

    pub fn clear_operand_usage(&mut self) {
        self.operand_usage.clear();
    }

    pub fn has_operand_usage(&self) -> bool {
        self.operand_usage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operand_usage(&mut self, v: operand_usage) {
        self.operand_usage = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_operand_usage(&mut self) -> &mut operand_usage {
        if self.operand_usage.is_none() {
            self.operand_usage.set_default();
        }
        self.operand_usage.as_mut().unwrap()
    }

    // Take field
    pub fn take_operand_usage(&mut self) -> operand_usage {
        self.operand_usage.take().unwrap_or_else(|| operand_usage::new())
    }

    pub fn get_operand_usage(&self) -> &operand_usage {
        self.operand_usage.as_ref().unwrap_or_else(|| operand_usage::default_instance())
    }

    // required .taint_info taint_info = 4;

    pub fn clear_taint_info(&mut self) {
        self.taint_info.clear();
    }

    pub fn has_taint_info(&self) -> bool {
        self.taint_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_taint_info(&mut self, v: taint_info) {
        self.taint_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_taint_info(&mut self) -> &mut taint_info {
        if self.taint_info.is_none() {
            self.taint_info.set_default();
        }
        self.taint_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_taint_info(&mut self) -> taint_info {
        self.taint_info.take().unwrap_or_else(|| taint_info::new())
    }

    pub fn get_taint_info(&self) -> &taint_info {
        self.taint_info.as_ref().unwrap_or_else(|| taint_info::default_instance())
    }

    // required bytes value = 5;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_value(&self) -> &[u8] {
        match self.value.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for operand_info {
    fn is_initialized(&self) -> bool {
        if self.operand_info_specific.is_none() {
            return false;
        }
        if self.bit_length.is_none() {
            return false;
        }
        if self.operand_usage.is_none() {
            return false;
        }
        if self.taint_info.is_none() {
            return false;
        }
        if self.value.is_none() {
            return false;
        }
        for v in &self.operand_info_specific {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.operand_usage {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.taint_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.operand_info_specific)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.bit_length = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.operand_usage)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.taint_info)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.operand_info_specific.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.bit_length {
            my_size += ::protobuf::rt::value_varint_zigzag_size(2, v);
        }
        if let Some(ref v) = self.operand_usage.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.taint_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.value.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.operand_info_specific.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.bit_length {
            os.write_sint32(2, v)?;
        }
        if let Some(ref v) = self.operand_usage.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.taint_info.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_bytes(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> operand_info {
        operand_info::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<operand_info_specific>>(
                    "operand_info_specific",
                    |m: &operand_info| { &m.operand_info_specific },
                    |m: &mut operand_info| { &mut m.operand_info_specific },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                    "bit_length",
                    |m: &operand_info| { &m.bit_length },
                    |m: &mut operand_info| { &mut m.bit_length },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<operand_usage>>(
                    "operand_usage",
                    |m: &operand_info| { &m.operand_usage },
                    |m: &mut operand_info| { &mut m.operand_usage },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<taint_info>>(
                    "taint_info",
                    |m: &operand_info| { &m.taint_info },
                    |m: &mut operand_info| { &mut m.taint_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "value",
                    |m: &operand_info| { &m.value },
                    |m: &mut operand_info| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<operand_info>(
                    "operand_info",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static operand_info {
        static mut instance: ::protobuf::lazy::Lazy<operand_info> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const operand_info,
        };
        unsafe {
            instance.get(operand_info::new)
        }
    }
}

impl ::protobuf::Clear for operand_info {
    fn clear(&mut self) {
        self.clear_operand_info_specific();
        self.clear_bit_length();
        self.clear_operand_usage();
        self.clear_taint_info();
        self.clear_value();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for operand_info {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for operand_info {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct operand_info_specific {
    // message fields
    mem_operand: ::protobuf::SingularPtrField<mem_operand>,
    reg_operand: ::protobuf::SingularPtrField<reg_operand>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl operand_info_specific {
    pub fn new() -> operand_info_specific {
        ::std::default::Default::default()
    }

    // optional .mem_operand mem_operand = 1;

    pub fn clear_mem_operand(&mut self) {
        self.mem_operand.clear();
    }

    pub fn has_mem_operand(&self) -> bool {
        self.mem_operand.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mem_operand(&mut self, v: mem_operand) {
        self.mem_operand = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mem_operand(&mut self) -> &mut mem_operand {
        if self.mem_operand.is_none() {
            self.mem_operand.set_default();
        }
        self.mem_operand.as_mut().unwrap()
    }

    // Take field
    pub fn take_mem_operand(&mut self) -> mem_operand {
        self.mem_operand.take().unwrap_or_else(|| mem_operand::new())
    }

    pub fn get_mem_operand(&self) -> &mem_operand {
        self.mem_operand.as_ref().unwrap_or_else(|| mem_operand::default_instance())
    }

    // optional .reg_operand reg_operand = 2;

    pub fn clear_reg_operand(&mut self) {
        self.reg_operand.clear();
    }

    pub fn has_reg_operand(&self) -> bool {
        self.reg_operand.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reg_operand(&mut self, v: reg_operand) {
        self.reg_operand = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reg_operand(&mut self) -> &mut reg_operand {
        if self.reg_operand.is_none() {
            self.reg_operand.set_default();
        }
        self.reg_operand.as_mut().unwrap()
    }

    // Take field
    pub fn take_reg_operand(&mut self) -> reg_operand {
        self.reg_operand.take().unwrap_or_else(|| reg_operand::new())
    }

    pub fn get_reg_operand(&self) -> &reg_operand {
        self.reg_operand.as_ref().unwrap_or_else(|| reg_operand::default_instance())
    }
}

impl ::protobuf::Message for operand_info_specific {
    fn is_initialized(&self) -> bool {
        for v in &self.mem_operand {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.reg_operand {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.mem_operand)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.reg_operand)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.mem_operand.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.reg_operand.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.mem_operand.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.reg_operand.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> operand_info_specific {
        operand_info_specific::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<mem_operand>>(
                    "mem_operand",
                    |m: &operand_info_specific| { &m.mem_operand },
                    |m: &mut operand_info_specific| { &mut m.mem_operand },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<reg_operand>>(
                    "reg_operand",
                    |m: &operand_info_specific| { &m.reg_operand },
                    |m: &mut operand_info_specific| { &mut m.reg_operand },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<operand_info_specific>(
                    "operand_info_specific",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static operand_info_specific {
        static mut instance: ::protobuf::lazy::Lazy<operand_info_specific> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const operand_info_specific,
        };
        unsafe {
            instance.get(operand_info_specific::new)
        }
    }
}

impl ::protobuf::Clear for operand_info_specific {
    fn clear(&mut self) {
        self.clear_mem_operand();
        self.clear_reg_operand();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for operand_info_specific {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for operand_info_specific {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct reg_operand {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl reg_operand {
    pub fn new() -> reg_operand {
        ::std::default::Default::default()
    }

    // required string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for reg_operand {
    fn is_initialized(&self) -> bool {
        if self.name.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> reg_operand {
        reg_operand::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &reg_operand| { &m.name },
                    |m: &mut reg_operand| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<reg_operand>(
                    "reg_operand",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static reg_operand {
        static mut instance: ::protobuf::lazy::Lazy<reg_operand> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const reg_operand,
        };
        unsafe {
            instance.get(reg_operand::new)
        }
    }
}

impl ::protobuf::Clear for reg_operand {
    fn clear(&mut self) {
        self.clear_name();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for reg_operand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for reg_operand {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct mem_operand {
    // message fields
    address: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl mem_operand {
    pub fn new() -> mem_operand {
        ::std::default::Default::default()
    }

    // required uint64 address = 1;

    pub fn clear_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: u64) {
        self.address = ::std::option::Option::Some(v);
    }

    pub fn get_address(&self) -> u64 {
        self.address.unwrap_or(0)
    }
}

impl ::protobuf::Message for mem_operand {
    fn is_initialized(&self) -> bool {
        if self.address.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.address = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.address {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.address {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> mem_operand {
        mem_operand::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "address",
                    |m: &mem_operand| { &m.address },
                    |m: &mut mem_operand| { &mut m.address },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<mem_operand>(
                    "mem_operand",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static mem_operand {
        static mut instance: ::protobuf::lazy::Lazy<mem_operand> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const mem_operand,
        };
        unsafe {
            instance.get(mem_operand::new)
        }
    }
}

impl ::protobuf::Clear for mem_operand {
    fn clear(&mut self) {
        self.clear_address();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for mem_operand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for mem_operand {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct operand_usage {
    // message fields
    read: ::std::option::Option<bool>,
    written: ::std::option::Option<bool>,
    index: ::std::option::Option<bool>,
    base: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl operand_usage {
    pub fn new() -> operand_usage {
        ::std::default::Default::default()
    }

    // required bool read = 1;

    pub fn clear_read(&mut self) {
        self.read = ::std::option::Option::None;
    }

    pub fn has_read(&self) -> bool {
        self.read.is_some()
    }

    // Param is passed by value, moved
    pub fn set_read(&mut self, v: bool) {
        self.read = ::std::option::Option::Some(v);
    }

    pub fn get_read(&self) -> bool {
        self.read.unwrap_or(false)
    }

    // required bool written = 2;

    pub fn clear_written(&mut self) {
        self.written = ::std::option::Option::None;
    }

    pub fn has_written(&self) -> bool {
        self.written.is_some()
    }

    // Param is passed by value, moved
    pub fn set_written(&mut self, v: bool) {
        self.written = ::std::option::Option::Some(v);
    }

    pub fn get_written(&self) -> bool {
        self.written.unwrap_or(false)
    }

    // required bool index = 3;

    pub fn clear_index(&mut self) {
        self.index = ::std::option::Option::None;
    }

    pub fn has_index(&self) -> bool {
        self.index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: bool) {
        self.index = ::std::option::Option::Some(v);
    }

    pub fn get_index(&self) -> bool {
        self.index.unwrap_or(false)
    }

    // required bool base = 4;

    pub fn clear_base(&mut self) {
        self.base = ::std::option::Option::None;
    }

    pub fn has_base(&self) -> bool {
        self.base.is_some()
    }

    // Param is passed by value, moved
    pub fn set_base(&mut self, v: bool) {
        self.base = ::std::option::Option::Some(v);
    }

    pub fn get_base(&self) -> bool {
        self.base.unwrap_or(false)
    }
}

impl ::protobuf::Message for operand_usage {
    fn is_initialized(&self) -> bool {
        if self.read.is_none() {
            return false;
        }
        if self.written.is_none() {
            return false;
        }
        if self.index.is_none() {
            return false;
        }
        if self.base.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.read = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.written = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.index = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.base = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.read {
            my_size += 2;
        }
        if let Some(v) = self.written {
            my_size += 2;
        }
        if let Some(v) = self.index {
            my_size += 2;
        }
        if let Some(v) = self.base {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.read {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.written {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.index {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.base {
            os.write_bool(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> operand_usage {
        operand_usage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "read",
                    |m: &operand_usage| { &m.read },
                    |m: &mut operand_usage| { &mut m.read },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "written",
                    |m: &operand_usage| { &m.written },
                    |m: &mut operand_usage| { &mut m.written },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "index",
                    |m: &operand_usage| { &m.index },
                    |m: &mut operand_usage| { &mut m.index },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "base",
                    |m: &operand_usage| { &m.base },
                    |m: &mut operand_usage| { &mut m.base },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<operand_usage>(
                    "operand_usage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static operand_usage {
        static mut instance: ::protobuf::lazy::Lazy<operand_usage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const operand_usage,
        };
        unsafe {
            instance.get(operand_usage::new)
        }
    }
}

impl ::protobuf::Clear for operand_usage {
    fn clear(&mut self) {
        self.clear_read();
        self.clear_written();
        self.clear_index();
        self.clear_base();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for operand_usage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for operand_usage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct taint_info {
    // message fields
    no_taint: ::std::option::Option<bool>,
    taint_id: ::std::option::Option<u64>,
    taint_multiple: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl taint_info {
    pub fn new() -> taint_info {
        ::std::default::Default::default()
    }

    // optional bool no_taint = 1;

    pub fn clear_no_taint(&mut self) {
        self.no_taint = ::std::option::Option::None;
    }

    pub fn has_no_taint(&self) -> bool {
        self.no_taint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_no_taint(&mut self, v: bool) {
        self.no_taint = ::std::option::Option::Some(v);
    }

    pub fn get_no_taint(&self) -> bool {
        self.no_taint.unwrap_or(false)
    }

    // optional uint64 taint_id = 2;

    pub fn clear_taint_id(&mut self) {
        self.taint_id = ::std::option::Option::None;
    }

    pub fn has_taint_id(&self) -> bool {
        self.taint_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_taint_id(&mut self, v: u64) {
        self.taint_id = ::std::option::Option::Some(v);
    }

    pub fn get_taint_id(&self) -> u64 {
        self.taint_id.unwrap_or(0)
    }

    // optional bool taint_multiple = 3;

    pub fn clear_taint_multiple(&mut self) {
        self.taint_multiple = ::std::option::Option::None;
    }

    pub fn has_taint_multiple(&self) -> bool {
        self.taint_multiple.is_some()
    }

    // Param is passed by value, moved
    pub fn set_taint_multiple(&mut self, v: bool) {
        self.taint_multiple = ::std::option::Option::Some(v);
    }

    pub fn get_taint_multiple(&self) -> bool {
        self.taint_multiple.unwrap_or(false)
    }
}

impl ::protobuf::Message for taint_info {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.no_taint = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.taint_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.taint_multiple = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.no_taint {
            my_size += 2;
        }
        if let Some(v) = self.taint_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.taint_multiple {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.no_taint {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.taint_id {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.taint_multiple {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> taint_info {
        taint_info::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "no_taint",
                    |m: &taint_info| { &m.no_taint },
                    |m: &mut taint_info| { &mut m.no_taint },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "taint_id",
                    |m: &taint_info| { &m.taint_id },
                    |m: &mut taint_info| { &mut m.taint_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "taint_multiple",
                    |m: &taint_info| { &m.taint_multiple },
                    |m: &mut taint_info| { &mut m.taint_multiple },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<taint_info>(
                    "taint_info",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static taint_info {
        static mut instance: ::protobuf::lazy::Lazy<taint_info> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const taint_info,
        };
        unsafe {
            instance.get(taint_info::new)
        }
    }
}

impl ::protobuf::Clear for taint_info {
    fn clear(&mut self) {
        self.clear_no_taint();
        self.clear_taint_id();
        self.clear_taint_multiple();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for taint_info {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for taint_info {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0estdframe.proto\"\xde\x01\n\tstd_frame\x12\x18\n\x07address\x18\x01\
    \x20\x02(\x04R\x07address\x12\x1b\n\tthread_id\x18\x02\x20\x02(\x04R\x08\
    threadId\x12\x1a\n\x08rawbytes\x18\x03\x20\x02(\x0cR\x08rawbytes\x12=\n\
    \x10operand_pre_list\x18\x04\x20\x02(\x0b2\x13.operand_value_listR\x0eop\
    erandPreList\x12?\n\x11operand_post_list\x18\x05\x20\x01(\x0b2\x13.opera\
    nd_value_listR\x0foperandPostList\"7\n\x12operand_value_list\x12!\n\x04e\
    lem\x18\x01\x20\x03(\x0b2\r.operand_infoR\x04elem\"\xf0\x01\n\x0coperand\
    _info\x12J\n\x15operand_info_specific\x18\x01\x20\x02(\x0b2\x16.operand_\
    info_specificR\x13operandInfoSpecific\x12\x1d\n\nbit_length\x18\x02\x20\
    \x02(\x11R\tbitLength\x123\n\roperand_usage\x18\x03\x20\x02(\x0b2\x0e.op\
    erand_usageR\x0coperandUsage\x12*\n\ntaint_info\x18\x04\x20\x02(\x0b2\
    \x0b.taint_infoR\ttaintInfo\x12\x14\n\x05value\x18\x05\x20\x02(\x0cR\x05\
    value\"u\n\x15operand_info_specific\x12-\n\x0bmem_operand\x18\x01\x20\
    \x01(\x0b2\x0c.mem_operandR\nmemOperand\x12-\n\x0breg_operand\x18\x02\
    \x20\x01(\x0b2\x0c.reg_operandR\nregOperand\"!\n\x0breg_operand\x12\x12\
    \n\x04name\x18\x01\x20\x02(\tR\x04name\"'\n\x0bmem_operand\x12\x18\n\x07\
    address\x18\x01\x20\x02(\x04R\x07address\"g\n\roperand_usage\x12\x12\n\
    \x04read\x18\x01\x20\x02(\x08R\x04read\x12\x18\n\x07written\x18\x02\x20\
    \x02(\x08R\x07written\x12\x14\n\x05index\x18\x03\x20\x02(\x08R\x05index\
    \x12\x12\n\x04base\x18\x04\x20\x02(\x08R\x04base\"i\n\ntaint_info\x12\
    \x19\n\x08no_taint\x18\x01\x20\x01(\x08R\x07noTaint\x12\x19\n\x08taint_i\
    d\x18\x02\x20\x01(\x04R\x07taintId\x12%\n\x0etaint_multiple\x18\x03\x20\
    \x01(\x08R\rtaintMultipleJ\xb6\r\n\x06\x12\x04\x01\0-\x01\n\n\n\x02\x04\
    \0\x12\x04\x01\0\x07\x01\n\n\n\x03\x04\0\x01\x12\x03\x01\x08\x11\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\x02\x04\x20\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\
    \x02\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x02\r\x13\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x02\x14\x1b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x02\x1e\x1f\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x03\x04\"\n\x0c\n\x05\x04\
    \0\x02\x01\x04\x12\x03\x03\x04\x0c\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    \x03\r\x13\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x03\x14\x1d\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\x03\x20!\n\x0b\n\x04\x04\0\x02\x02\x12\x03\
    \x04\x04\x20\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x04\x04\x0c\n\x0c\n\
    \x05\x04\0\x02\x02\x05\x12\x03\x04\r\x12\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\x04\x13\x1b\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x04\x1e\x1f\n\
    \x0b\n\x04\x04\0\x02\x03\x12\x03\x05\x045\n\x0c\n\x05\x04\0\x02\x03\x04\
    \x12\x03\x05\x04\x0c\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\x05\r\x1f\n\
    \x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x05\x200\n\x0c\n\x05\x04\0\x02\x03\
    \x03\x12\x03\x0534\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x06\x046\n\x0c\n\
    \x05\x04\0\x02\x04\x04\x12\x03\x06\x04\x0c\n\x0c\n\x05\x04\0\x02\x04\x06\
    \x12\x03\x06\r\x1f\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x06\x201\n\x0c\
    \n\x05\x04\0\x02\x04\x03\x12\x03\x0645\n\n\n\x02\x04\x01\x12\x04\t\0\x0b\
    \x01\n\n\n\x03\x04\x01\x01\x12\x03\t\x08\x1a\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x03\n\x04#\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\n\x04\x0c\n\x0c\n\
    \x05\x04\x01\x02\0\x06\x12\x03\n\r\x19\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03\n\x1a\x1e\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\n!\"\n\n\n\x02\x04\
    \x02\x12\x04\r\0\x13\x01\n\n\n\x03\x04\x02\x01\x12\x03\r\x08\x14\n\x0b\n\
    \x04\x04\x02\x02\0\x12\x03\x0e\x04=\n\x0c\n\x05\x04\x02\x02\0\x04\x12\
    \x03\x0e\x04\x0c\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x0e\r\"\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03\x0e#8\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03\x0e;<\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x0f\x04#\n\x0c\n\x05\x04\
    \x02\x02\x01\x04\x12\x03\x0f\x04\x0c\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\
    \x03\x0f\r\x13\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x0f\x14\x1e\n\x0c\
    \n\x05\x04\x02\x02\x01\x03\x12\x03\x0f!\"\n\x0b\n\x04\x04\x02\x02\x02\
    \x12\x03\x10\x04-\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\x03\x10\x04\x0c\n\
    \x0c\n\x05\x04\x02\x02\x02\x06\x12\x03\x10\r\x1a\n\x0c\n\x05\x04\x02\x02\
    \x02\x01\x12\x03\x10\x1b(\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x10+,\
    \n\x0b\n\x04\x04\x02\x02\x03\x12\x03\x11\x04'\n\x0c\n\x05\x04\x02\x02\
    \x03\x04\x12\x03\x11\x04\x0c\n\x0c\n\x05\x04\x02\x02\x03\x06\x12\x03\x11\
    \r\x17\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\x11\x18\"\n\x0c\n\x05\x04\
    \x02\x02\x03\x03\x12\x03\x11%&\n\x0b\n\x04\x04\x02\x02\x04\x12\x03\x12\
    \x04\x1d\n\x0c\n\x05\x04\x02\x02\x04\x04\x12\x03\x12\x04\x0c\n\x0c\n\x05\
    \x04\x02\x02\x04\x05\x12\x03\x12\r\x12\n\x0c\n\x05\x04\x02\x02\x04\x01\
    \x12\x03\x12\x13\x18\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03\x12\x1b\x1c\
    \n\n\n\x02\x04\x03\x12\x04\x15\0\x18\x01\n\n\n\x03\x04\x03\x01\x12\x03\
    \x15\x08\x1d\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x16\x04)\n\x0c\n\x05\x04\
    \x03\x02\0\x04\x12\x03\x16\x04\x0c\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03\
    \x16\r\x18\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x16\x19$\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03\x16'(\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x17\
    \x04)\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03\x17\x04\x0c\n\x0c\n\x05\
    \x04\x03\x02\x01\x06\x12\x03\x17\r\x18\n\x0c\n\x05\x04\x03\x02\x01\x01\
    \x12\x03\x17\x19$\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x17'(\n\n\n\
    \x02\x04\x04\x12\x04\x1a\0\x1c\x01\n\n\n\x03\x04\x04\x01\x12\x03\x1a\x08\
    \x13\n\x0b\n\x04\x04\x04\x02\0\x12\x03\x1b\x04\x1d\n\x0c\n\x05\x04\x04\
    \x02\0\x04\x12\x03\x1b\x04\x0c\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03\x1b\
    \r\x13\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x1b\x14\x18\n\x0c\n\x05\x04\
    \x04\x02\0\x03\x12\x03\x1b\x1b\x1c\n\n\n\x02\x04\x05\x12\x04\x1e\0\x20\
    \x01\n\n\n\x03\x04\x05\x01\x12\x03\x1e\x08\x13\n\x0b\n\x04\x04\x05\x02\0\
    \x12\x03\x1f\x04\x20\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03\x1f\x04\x0c\n\
    \x0c\n\x05\x04\x05\x02\0\x05\x12\x03\x1f\r\x13\n\x0c\n\x05\x04\x05\x02\0\
    \x01\x12\x03\x1f\x14\x1b\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03\x1f\x1e\
    \x1f\n\n\n\x02\x04\x06\x12\x04\"\0'\x01\n\n\n\x03\x04\x06\x01\x12\x03\"\
    \x08\x15\n\x0b\n\x04\x04\x06\x02\0\x12\x03#\x04\x1b\n\x0c\n\x05\x04\x06\
    \x02\0\x04\x12\x03#\x04\x0c\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03#\r\x11\
    \n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03#\x12\x16\n\x0c\n\x05\x04\x06\x02\
    \0\x03\x12\x03#\x19\x1a\n\x0b\n\x04\x04\x06\x02\x01\x12\x03$\x04\x1e\n\
    \x0c\n\x05\x04\x06\x02\x01\x04\x12\x03$\x04\x0c\n\x0c\n\x05\x04\x06\x02\
    \x01\x05\x12\x03$\r\x11\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03$\x12\x19\
    \n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03$\x1c\x1d\n\x0b\n\x04\x04\x06\
    \x02\x02\x12\x03%\x04\x1c\n\x0c\n\x05\x04\x06\x02\x02\x04\x12\x03%\x04\
    \x0c\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\x03%\r\x11\n\x0c\n\x05\x04\x06\
    \x02\x02\x01\x12\x03%\x12\x17\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x03%\
    \x1a\x1b\n\x0b\n\x04\x04\x06\x02\x03\x12\x03&\x04\x1b\n\x0c\n\x05\x04\
    \x06\x02\x03\x04\x12\x03&\x04\x0c\n\x0c\n\x05\x04\x06\x02\x03\x05\x12\
    \x03&\r\x11\n\x0c\n\x05\x04\x06\x02\x03\x01\x12\x03&\x12\x16\n\x0c\n\x05\
    \x04\x06\x02\x03\x03\x12\x03&\x19\x1a\n\n\n\x02\x04\x07\x12\x04)\0-\x01\
    \n\n\n\x03\x04\x07\x01\x12\x03)\x08\x12\n\x0b\n\x04\x04\x07\x02\0\x12\
    \x03*\x04\x1f\n\x0c\n\x05\x04\x07\x02\0\x04\x12\x03*\x04\x0c\n\x0c\n\x05\
    \x04\x07\x02\0\x05\x12\x03*\r\x11\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03*\
    \x12\x1a\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03*\x1d\x1e\n\x0b\n\x04\x04\
    \x07\x02\x01\x12\x03+\x04!\n\x0c\n\x05\x04\x07\x02\x01\x04\x12\x03+\x04\
    \x0c\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03+\r\x13\n\x0c\n\x05\x04\x07\
    \x02\x01\x01\x12\x03+\x14\x1c\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03+\
    \x1f\x20\n\x0b\n\x04\x04\x07\x02\x02\x12\x03,\x04%\n\x0c\n\x05\x04\x07\
    \x02\x02\x04\x12\x03,\x04\x0c\n\x0c\n\x05\x04\x07\x02\x02\x05\x12\x03,\r\
    \x11\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x03,\x12\x20\n\x0c\n\x05\x04\
    \x07\x02\x02\x03\x12\x03,#$\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
