// This file is generated by rust-protobuf 2.2.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct frame {
    // message fields
    std_frame: ::protobuf::SingularPtrField<std_frame>,
    syscall_frame: ::protobuf::SingularPtrField<syscall_frame>,
    exception_frame: ::protobuf::SingularPtrField<exception_frame>,
    taint_intro_frame: ::protobuf::SingularPtrField<taint_intro_frame>,
    modload_frame: ::protobuf::SingularPtrField<modload_frame>,
    key_frame: ::protobuf::SingularPtrField<key_frame>,
    block_frame: ::protobuf::SingularPtrField<block_frame>,
    call_frame: ::protobuf::SingularPtrField<call_frame>,
    ret_frame: ::protobuf::SingularPtrField<ret_frame>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl frame {
    pub fn new() -> frame {
        ::std::default::Default::default()
    }

    // optional .std_frame std_frame = 1;

    pub fn clear_std_frame(&mut self) {
        self.std_frame.clear();
    }

    pub fn has_std_frame(&self) -> bool {
        self.std_frame.is_some()
    }

    // Param is passed by value, moved
    pub fn set_std_frame(&mut self, v: std_frame) {
        self.std_frame = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_std_frame(&mut self) -> &mut std_frame {
        if self.std_frame.is_none() {
            self.std_frame.set_default();
        }
        self.std_frame.as_mut().unwrap()
    }

    // Take field
    pub fn take_std_frame(&mut self) -> std_frame {
        self.std_frame.take().unwrap_or_else(|| std_frame::new())
    }

    pub fn get_std_frame(&self) -> &std_frame {
        self.std_frame.as_ref().unwrap_or_else(|| std_frame::default_instance())
    }

    // optional .syscall_frame syscall_frame = 2;

    pub fn clear_syscall_frame(&mut self) {
        self.syscall_frame.clear();
    }

    pub fn has_syscall_frame(&self) -> bool {
        self.syscall_frame.is_some()
    }

    // Param is passed by value, moved
    pub fn set_syscall_frame(&mut self, v: syscall_frame) {
        self.syscall_frame = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_syscall_frame(&mut self) -> &mut syscall_frame {
        if self.syscall_frame.is_none() {
            self.syscall_frame.set_default();
        }
        self.syscall_frame.as_mut().unwrap()
    }

    // Take field
    pub fn take_syscall_frame(&mut self) -> syscall_frame {
        self.syscall_frame.take().unwrap_or_else(|| syscall_frame::new())
    }

    pub fn get_syscall_frame(&self) -> &syscall_frame {
        self.syscall_frame.as_ref().unwrap_or_else(|| syscall_frame::default_instance())
    }

    // optional .exception_frame exception_frame = 3;

    pub fn clear_exception_frame(&mut self) {
        self.exception_frame.clear();
    }

    pub fn has_exception_frame(&self) -> bool {
        self.exception_frame.is_some()
    }

    // Param is passed by value, moved
    pub fn set_exception_frame(&mut self, v: exception_frame) {
        self.exception_frame = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_exception_frame(&mut self) -> &mut exception_frame {
        if self.exception_frame.is_none() {
            self.exception_frame.set_default();
        }
        self.exception_frame.as_mut().unwrap()
    }

    // Take field
    pub fn take_exception_frame(&mut self) -> exception_frame {
        self.exception_frame.take().unwrap_or_else(|| exception_frame::new())
    }

    pub fn get_exception_frame(&self) -> &exception_frame {
        self.exception_frame.as_ref().unwrap_or_else(|| exception_frame::default_instance())
    }

    // optional .taint_intro_frame taint_intro_frame = 4;

    pub fn clear_taint_intro_frame(&mut self) {
        self.taint_intro_frame.clear();
    }

    pub fn has_taint_intro_frame(&self) -> bool {
        self.taint_intro_frame.is_some()
    }

    // Param is passed by value, moved
    pub fn set_taint_intro_frame(&mut self, v: taint_intro_frame) {
        self.taint_intro_frame = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_taint_intro_frame(&mut self) -> &mut taint_intro_frame {
        if self.taint_intro_frame.is_none() {
            self.taint_intro_frame.set_default();
        }
        self.taint_intro_frame.as_mut().unwrap()
    }

    // Take field
    pub fn take_taint_intro_frame(&mut self) -> taint_intro_frame {
        self.taint_intro_frame.take().unwrap_or_else(|| taint_intro_frame::new())
    }

    pub fn get_taint_intro_frame(&self) -> &taint_intro_frame {
        self.taint_intro_frame.as_ref().unwrap_or_else(|| taint_intro_frame::default_instance())
    }

    // optional .modload_frame modload_frame = 5;

    pub fn clear_modload_frame(&mut self) {
        self.modload_frame.clear();
    }

    pub fn has_modload_frame(&self) -> bool {
        self.modload_frame.is_some()
    }

    // Param is passed by value, moved
    pub fn set_modload_frame(&mut self, v: modload_frame) {
        self.modload_frame = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_modload_frame(&mut self) -> &mut modload_frame {
        if self.modload_frame.is_none() {
            self.modload_frame.set_default();
        }
        self.modload_frame.as_mut().unwrap()
    }

    // Take field
    pub fn take_modload_frame(&mut self) -> modload_frame {
        self.modload_frame.take().unwrap_or_else(|| modload_frame::new())
    }

    pub fn get_modload_frame(&self) -> &modload_frame {
        self.modload_frame.as_ref().unwrap_or_else(|| modload_frame::default_instance())
    }

    // optional .key_frame key_frame = 6;

    pub fn clear_key_frame(&mut self) {
        self.key_frame.clear();
    }

    pub fn has_key_frame(&self) -> bool {
        self.key_frame.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key_frame(&mut self, v: key_frame) {
        self.key_frame = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_frame(&mut self) -> &mut key_frame {
        if self.key_frame.is_none() {
            self.key_frame.set_default();
        }
        self.key_frame.as_mut().unwrap()
    }

    // Take field
    pub fn take_key_frame(&mut self) -> key_frame {
        self.key_frame.take().unwrap_or_else(|| key_frame::new())
    }

    pub fn get_key_frame(&self) -> &key_frame {
        self.key_frame.as_ref().unwrap_or_else(|| key_frame::default_instance())
    }

    // optional .block_frame block_frame = 7;

    pub fn clear_block_frame(&mut self) {
        self.block_frame.clear();
    }

    pub fn has_block_frame(&self) -> bool {
        self.block_frame.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block_frame(&mut self, v: block_frame) {
        self.block_frame = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_frame(&mut self) -> &mut block_frame {
        if self.block_frame.is_none() {
            self.block_frame.set_default();
        }
        self.block_frame.as_mut().unwrap()
    }

    // Take field
    pub fn take_block_frame(&mut self) -> block_frame {
        self.block_frame.take().unwrap_or_else(|| block_frame::new())
    }

    pub fn get_block_frame(&self) -> &block_frame {
        self.block_frame.as_ref().unwrap_or_else(|| block_frame::default_instance())
    }

    // optional .call_frame call_frame = 8;

    pub fn clear_call_frame(&mut self) {
        self.call_frame.clear();
    }

    pub fn has_call_frame(&self) -> bool {
        self.call_frame.is_some()
    }

    // Param is passed by value, moved
    pub fn set_call_frame(&mut self, v: call_frame) {
        self.call_frame = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_call_frame(&mut self) -> &mut call_frame {
        if self.call_frame.is_none() {
            self.call_frame.set_default();
        }
        self.call_frame.as_mut().unwrap()
    }

    // Take field
    pub fn take_call_frame(&mut self) -> call_frame {
        self.call_frame.take().unwrap_or_else(|| call_frame::new())
    }

    pub fn get_call_frame(&self) -> &call_frame {
        self.call_frame.as_ref().unwrap_or_else(|| call_frame::default_instance())
    }

    // optional .ret_frame ret_frame = 9;

    pub fn clear_ret_frame(&mut self) {
        self.ret_frame.clear();
    }

    pub fn has_ret_frame(&self) -> bool {
        self.ret_frame.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ret_frame(&mut self, v: ret_frame) {
        self.ret_frame = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ret_frame(&mut self) -> &mut ret_frame {
        if self.ret_frame.is_none() {
            self.ret_frame.set_default();
        }
        self.ret_frame.as_mut().unwrap()
    }

    // Take field
    pub fn take_ret_frame(&mut self) -> ret_frame {
        self.ret_frame.take().unwrap_or_else(|| ret_frame::new())
    }

    pub fn get_ret_frame(&self) -> &ret_frame {
        self.ret_frame.as_ref().unwrap_or_else(|| ret_frame::default_instance())
    }
}

impl ::protobuf::Message for frame {
    fn is_initialized(&self) -> bool {
        for v in &self.std_frame {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.syscall_frame {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.exception_frame {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.taint_intro_frame {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.modload_frame {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.key_frame {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.block_frame {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.call_frame {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ret_frame {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.std_frame)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.syscall_frame)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.exception_frame)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.taint_intro_frame)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.modload_frame)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.key_frame)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block_frame)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.call_frame)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ret_frame)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.std_frame.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.syscall_frame.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.exception_frame.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.taint_intro_frame.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.modload_frame.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.key_frame.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.block_frame.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.call_frame.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ret_frame.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.std_frame.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.syscall_frame.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.exception_frame.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.taint_intro_frame.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.modload_frame.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.key_frame.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.block_frame.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.call_frame.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ret_frame.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> frame {
        frame::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<std_frame>>(
                    "std_frame",
                    |m: &frame| { &m.std_frame },
                    |m: &mut frame| { &mut m.std_frame },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<syscall_frame>>(
                    "syscall_frame",
                    |m: &frame| { &m.syscall_frame },
                    |m: &mut frame| { &mut m.syscall_frame },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<exception_frame>>(
                    "exception_frame",
                    |m: &frame| { &m.exception_frame },
                    |m: &mut frame| { &mut m.exception_frame },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<taint_intro_frame>>(
                    "taint_intro_frame",
                    |m: &frame| { &m.taint_intro_frame },
                    |m: &mut frame| { &mut m.taint_intro_frame },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<modload_frame>>(
                    "modload_frame",
                    |m: &frame| { &m.modload_frame },
                    |m: &mut frame| { &mut m.modload_frame },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<key_frame>>(
                    "key_frame",
                    |m: &frame| { &m.key_frame },
                    |m: &mut frame| { &mut m.key_frame },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<block_frame>>(
                    "block_frame",
                    |m: &frame| { &m.block_frame },
                    |m: &mut frame| { &mut m.block_frame },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<call_frame>>(
                    "call_frame",
                    |m: &frame| { &m.call_frame },
                    |m: &mut frame| { &mut m.call_frame },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ret_frame>>(
                    "ret_frame",
                    |m: &frame| { &m.ret_frame },
                    |m: &mut frame| { &mut m.ret_frame },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<frame>(
                    "frame",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static frame {
        static mut instance: ::protobuf::lazy::Lazy<frame> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const frame,
        };
        unsafe {
            instance.get(frame::new)
        }
    }
}

impl ::protobuf::Clear for frame {
    fn clear(&mut self) {
        self.clear_std_frame();
        self.clear_syscall_frame();
        self.clear_exception_frame();
        self.clear_taint_intro_frame();
        self.clear_modload_frame();
        self.clear_key_frame();
        self.clear_block_frame();
        self.clear_call_frame();
        self.clear_ret_frame();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for frame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for frame {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct operand_value_list {
    // message fields
    elem: ::protobuf::RepeatedField<operand_info>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl operand_value_list {
    pub fn new() -> operand_value_list {
        ::std::default::Default::default()
    }

    // repeated .operand_info elem = 1;

    pub fn clear_elem(&mut self) {
        self.elem.clear();
    }

    // Param is passed by value, moved
    pub fn set_elem(&mut self, v: ::protobuf::RepeatedField<operand_info>) {
        self.elem = v;
    }

    // Mutable pointer to the field.
    pub fn mut_elem(&mut self) -> &mut ::protobuf::RepeatedField<operand_info> {
        &mut self.elem
    }

    // Take field
    pub fn take_elem(&mut self) -> ::protobuf::RepeatedField<operand_info> {
        ::std::mem::replace(&mut self.elem, ::protobuf::RepeatedField::new())
    }

    pub fn get_elem(&self) -> &[operand_info] {
        &self.elem
    }
}

impl ::protobuf::Message for operand_value_list {
    fn is_initialized(&self) -> bool {
        for v in &self.elem {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.elem)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.elem {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.elem {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> operand_value_list {
        operand_value_list::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<operand_info>>(
                    "elem",
                    |m: &operand_value_list| { &m.elem },
                    |m: &mut operand_value_list| { &mut m.elem },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<operand_value_list>(
                    "operand_value_list",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static operand_value_list {
        static mut instance: ::protobuf::lazy::Lazy<operand_value_list> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const operand_value_list,
        };
        unsafe {
            instance.get(operand_value_list::new)
        }
    }
}

impl ::protobuf::Clear for operand_value_list {
    fn clear(&mut self) {
        self.clear_elem();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for operand_value_list {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for operand_value_list {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct operand_info {
    // message fields
    operand_info_specific: ::protobuf::SingularPtrField<operand_info_specific>,
    bit_length: ::std::option::Option<i32>,
    operand_usage: ::protobuf::SingularPtrField<operand_usage>,
    taint_info: ::protobuf::SingularPtrField<taint_info>,
    value: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl operand_info {
    pub fn new() -> operand_info {
        ::std::default::Default::default()
    }

    // required .operand_info_specific operand_info_specific = 1;

    pub fn clear_operand_info_specific(&mut self) {
        self.operand_info_specific.clear();
    }

    pub fn has_operand_info_specific(&self) -> bool {
        self.operand_info_specific.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operand_info_specific(&mut self, v: operand_info_specific) {
        self.operand_info_specific = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_operand_info_specific(&mut self) -> &mut operand_info_specific {
        if self.operand_info_specific.is_none() {
            self.operand_info_specific.set_default();
        }
        self.operand_info_specific.as_mut().unwrap()
    }

    // Take field
    pub fn take_operand_info_specific(&mut self) -> operand_info_specific {
        self.operand_info_specific.take().unwrap_or_else(|| operand_info_specific::new())
    }

    pub fn get_operand_info_specific(&self) -> &operand_info_specific {
        self.operand_info_specific.as_ref().unwrap_or_else(|| operand_info_specific::default_instance())
    }

    // required sint32 bit_length = 2;

    pub fn clear_bit_length(&mut self) {
        self.bit_length = ::std::option::Option::None;
    }

    pub fn has_bit_length(&self) -> bool {
        self.bit_length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bit_length(&mut self, v: i32) {
        self.bit_length = ::std::option::Option::Some(v);
    }

    pub fn get_bit_length(&self) -> i32 {
        self.bit_length.unwrap_or(0)
    }

    // required .operand_usage operand_usage = 3;

    pub fn clear_operand_usage(&mut self) {
        self.operand_usage.clear();
    }

    pub fn has_operand_usage(&self) -> bool {
        self.operand_usage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operand_usage(&mut self, v: operand_usage) {
        self.operand_usage = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_operand_usage(&mut self) -> &mut operand_usage {
        if self.operand_usage.is_none() {
            self.operand_usage.set_default();
        }
        self.operand_usage.as_mut().unwrap()
    }

    // Take field
    pub fn take_operand_usage(&mut self) -> operand_usage {
        self.operand_usage.take().unwrap_or_else(|| operand_usage::new())
    }

    pub fn get_operand_usage(&self) -> &operand_usage {
        self.operand_usage.as_ref().unwrap_or_else(|| operand_usage::default_instance())
    }

    // required .taint_info taint_info = 4;

    pub fn clear_taint_info(&mut self) {
        self.taint_info.clear();
    }

    pub fn has_taint_info(&self) -> bool {
        self.taint_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_taint_info(&mut self, v: taint_info) {
        self.taint_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_taint_info(&mut self) -> &mut taint_info {
        if self.taint_info.is_none() {
            self.taint_info.set_default();
        }
        self.taint_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_taint_info(&mut self) -> taint_info {
        self.taint_info.take().unwrap_or_else(|| taint_info::new())
    }

    pub fn get_taint_info(&self) -> &taint_info {
        self.taint_info.as_ref().unwrap_or_else(|| taint_info::default_instance())
    }

    // required bytes value = 5;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_value(&self) -> &[u8] {
        match self.value.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for operand_info {
    fn is_initialized(&self) -> bool {
        if self.operand_info_specific.is_none() {
            return false;
        }
        if self.bit_length.is_none() {
            return false;
        }
        if self.operand_usage.is_none() {
            return false;
        }
        if self.taint_info.is_none() {
            return false;
        }
        if self.value.is_none() {
            return false;
        }
        for v in &self.operand_info_specific {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.operand_usage {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.taint_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.operand_info_specific)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.bit_length = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.operand_usage)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.taint_info)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.operand_info_specific.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.bit_length {
            my_size += ::protobuf::rt::value_varint_zigzag_size(2, v);
        }
        if let Some(ref v) = self.operand_usage.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.taint_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.value.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.operand_info_specific.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.bit_length {
            os.write_sint32(2, v)?;
        }
        if let Some(ref v) = self.operand_usage.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.taint_info.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_bytes(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> operand_info {
        operand_info::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<operand_info_specific>>(
                    "operand_info_specific",
                    |m: &operand_info| { &m.operand_info_specific },
                    |m: &mut operand_info| { &mut m.operand_info_specific },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                    "bit_length",
                    |m: &operand_info| { &m.bit_length },
                    |m: &mut operand_info| { &mut m.bit_length },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<operand_usage>>(
                    "operand_usage",
                    |m: &operand_info| { &m.operand_usage },
                    |m: &mut operand_info| { &mut m.operand_usage },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<taint_info>>(
                    "taint_info",
                    |m: &operand_info| { &m.taint_info },
                    |m: &mut operand_info| { &mut m.taint_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "value",
                    |m: &operand_info| { &m.value },
                    |m: &mut operand_info| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<operand_info>(
                    "operand_info",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static operand_info {
        static mut instance: ::protobuf::lazy::Lazy<operand_info> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const operand_info,
        };
        unsafe {
            instance.get(operand_info::new)
        }
    }
}

impl ::protobuf::Clear for operand_info {
    fn clear(&mut self) {
        self.clear_operand_info_specific();
        self.clear_bit_length();
        self.clear_operand_usage();
        self.clear_taint_info();
        self.clear_value();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for operand_info {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for operand_info {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct operand_info_specific {
    // message fields
    mem_operand: ::protobuf::SingularPtrField<mem_operand>,
    reg_operand: ::protobuf::SingularPtrField<reg_operand>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl operand_info_specific {
    pub fn new() -> operand_info_specific {
        ::std::default::Default::default()
    }

    // optional .mem_operand mem_operand = 1;

    pub fn clear_mem_operand(&mut self) {
        self.mem_operand.clear();
    }

    pub fn has_mem_operand(&self) -> bool {
        self.mem_operand.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mem_operand(&mut self, v: mem_operand) {
        self.mem_operand = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mem_operand(&mut self) -> &mut mem_operand {
        if self.mem_operand.is_none() {
            self.mem_operand.set_default();
        }
        self.mem_operand.as_mut().unwrap()
    }

    // Take field
    pub fn take_mem_operand(&mut self) -> mem_operand {
        self.mem_operand.take().unwrap_or_else(|| mem_operand::new())
    }

    pub fn get_mem_operand(&self) -> &mem_operand {
        self.mem_operand.as_ref().unwrap_or_else(|| mem_operand::default_instance())
    }

    // optional .reg_operand reg_operand = 2;

    pub fn clear_reg_operand(&mut self) {
        self.reg_operand.clear();
    }

    pub fn has_reg_operand(&self) -> bool {
        self.reg_operand.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reg_operand(&mut self, v: reg_operand) {
        self.reg_operand = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reg_operand(&mut self) -> &mut reg_operand {
        if self.reg_operand.is_none() {
            self.reg_operand.set_default();
        }
        self.reg_operand.as_mut().unwrap()
    }

    // Take field
    pub fn take_reg_operand(&mut self) -> reg_operand {
        self.reg_operand.take().unwrap_or_else(|| reg_operand::new())
    }

    pub fn get_reg_operand(&self) -> &reg_operand {
        self.reg_operand.as_ref().unwrap_or_else(|| reg_operand::default_instance())
    }
}

impl ::protobuf::Message for operand_info_specific {
    fn is_initialized(&self) -> bool {
        for v in &self.mem_operand {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.reg_operand {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.mem_operand)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.reg_operand)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.mem_operand.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.reg_operand.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.mem_operand.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.reg_operand.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> operand_info_specific {
        operand_info_specific::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<mem_operand>>(
                    "mem_operand",
                    |m: &operand_info_specific| { &m.mem_operand },
                    |m: &mut operand_info_specific| { &mut m.mem_operand },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<reg_operand>>(
                    "reg_operand",
                    |m: &operand_info_specific| { &m.reg_operand },
                    |m: &mut operand_info_specific| { &mut m.reg_operand },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<operand_info_specific>(
                    "operand_info_specific",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static operand_info_specific {
        static mut instance: ::protobuf::lazy::Lazy<operand_info_specific> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const operand_info_specific,
        };
        unsafe {
            instance.get(operand_info_specific::new)
        }
    }
}

impl ::protobuf::Clear for operand_info_specific {
    fn clear(&mut self) {
        self.clear_mem_operand();
        self.clear_reg_operand();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for operand_info_specific {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for operand_info_specific {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct reg_operand {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl reg_operand {
    pub fn new() -> reg_operand {
        ::std::default::Default::default()
    }

    // required string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for reg_operand {
    fn is_initialized(&self) -> bool {
        if self.name.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> reg_operand {
        reg_operand::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &reg_operand| { &m.name },
                    |m: &mut reg_operand| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<reg_operand>(
                    "reg_operand",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static reg_operand {
        static mut instance: ::protobuf::lazy::Lazy<reg_operand> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const reg_operand,
        };
        unsafe {
            instance.get(reg_operand::new)
        }
    }
}

impl ::protobuf::Clear for reg_operand {
    fn clear(&mut self) {
        self.clear_name();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for reg_operand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for reg_operand {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct mem_operand {
    // message fields
    address: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl mem_operand {
    pub fn new() -> mem_operand {
        ::std::default::Default::default()
    }

    // required uint64 address = 1;

    pub fn clear_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: u64) {
        self.address = ::std::option::Option::Some(v);
    }

    pub fn get_address(&self) -> u64 {
        self.address.unwrap_or(0)
    }
}

impl ::protobuf::Message for mem_operand {
    fn is_initialized(&self) -> bool {
        if self.address.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.address = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.address {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.address {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> mem_operand {
        mem_operand::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "address",
                    |m: &mem_operand| { &m.address },
                    |m: &mut mem_operand| { &mut m.address },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<mem_operand>(
                    "mem_operand",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static mem_operand {
        static mut instance: ::protobuf::lazy::Lazy<mem_operand> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const mem_operand,
        };
        unsafe {
            instance.get(mem_operand::new)
        }
    }
}

impl ::protobuf::Clear for mem_operand {
    fn clear(&mut self) {
        self.clear_address();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for mem_operand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for mem_operand {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct operand_usage {
    // message fields
    read: ::std::option::Option<bool>,
    written: ::std::option::Option<bool>,
    index: ::std::option::Option<bool>,
    base: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl operand_usage {
    pub fn new() -> operand_usage {
        ::std::default::Default::default()
    }

    // required bool read = 1;

    pub fn clear_read(&mut self) {
        self.read = ::std::option::Option::None;
    }

    pub fn has_read(&self) -> bool {
        self.read.is_some()
    }

    // Param is passed by value, moved
    pub fn set_read(&mut self, v: bool) {
        self.read = ::std::option::Option::Some(v);
    }

    pub fn get_read(&self) -> bool {
        self.read.unwrap_or(false)
    }

    // required bool written = 2;

    pub fn clear_written(&mut self) {
        self.written = ::std::option::Option::None;
    }

    pub fn has_written(&self) -> bool {
        self.written.is_some()
    }

    // Param is passed by value, moved
    pub fn set_written(&mut self, v: bool) {
        self.written = ::std::option::Option::Some(v);
    }

    pub fn get_written(&self) -> bool {
        self.written.unwrap_or(false)
    }

    // required bool index = 3;

    pub fn clear_index(&mut self) {
        self.index = ::std::option::Option::None;
    }

    pub fn has_index(&self) -> bool {
        self.index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: bool) {
        self.index = ::std::option::Option::Some(v);
    }

    pub fn get_index(&self) -> bool {
        self.index.unwrap_or(false)
    }

    // required bool base = 4;

    pub fn clear_base(&mut self) {
        self.base = ::std::option::Option::None;
    }

    pub fn has_base(&self) -> bool {
        self.base.is_some()
    }

    // Param is passed by value, moved
    pub fn set_base(&mut self, v: bool) {
        self.base = ::std::option::Option::Some(v);
    }

    pub fn get_base(&self) -> bool {
        self.base.unwrap_or(false)
    }
}

impl ::protobuf::Message for operand_usage {
    fn is_initialized(&self) -> bool {
        if self.read.is_none() {
            return false;
        }
        if self.written.is_none() {
            return false;
        }
        if self.index.is_none() {
            return false;
        }
        if self.base.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.read = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.written = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.index = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.base = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.read {
            my_size += 2;
        }
        if let Some(v) = self.written {
            my_size += 2;
        }
        if let Some(v) = self.index {
            my_size += 2;
        }
        if let Some(v) = self.base {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.read {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.written {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.index {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.base {
            os.write_bool(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> operand_usage {
        operand_usage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "read",
                    |m: &operand_usage| { &m.read },
                    |m: &mut operand_usage| { &mut m.read },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "written",
                    |m: &operand_usage| { &m.written },
                    |m: &mut operand_usage| { &mut m.written },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "index",
                    |m: &operand_usage| { &m.index },
                    |m: &mut operand_usage| { &mut m.index },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "base",
                    |m: &operand_usage| { &m.base },
                    |m: &mut operand_usage| { &mut m.base },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<operand_usage>(
                    "operand_usage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static operand_usage {
        static mut instance: ::protobuf::lazy::Lazy<operand_usage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const operand_usage,
        };
        unsafe {
            instance.get(operand_usage::new)
        }
    }
}

impl ::protobuf::Clear for operand_usage {
    fn clear(&mut self) {
        self.clear_read();
        self.clear_written();
        self.clear_index();
        self.clear_base();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for operand_usage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for operand_usage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct taint_info {
    // message fields
    no_taint: ::std::option::Option<bool>,
    taint_id: ::std::option::Option<u64>,
    taint_multiple: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl taint_info {
    pub fn new() -> taint_info {
        ::std::default::Default::default()
    }

    // optional bool no_taint = 1;

    pub fn clear_no_taint(&mut self) {
        self.no_taint = ::std::option::Option::None;
    }

    pub fn has_no_taint(&self) -> bool {
        self.no_taint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_no_taint(&mut self, v: bool) {
        self.no_taint = ::std::option::Option::Some(v);
    }

    pub fn get_no_taint(&self) -> bool {
        self.no_taint.unwrap_or(false)
    }

    // optional uint64 taint_id = 2;

    pub fn clear_taint_id(&mut self) {
        self.taint_id = ::std::option::Option::None;
    }

    pub fn has_taint_id(&self) -> bool {
        self.taint_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_taint_id(&mut self, v: u64) {
        self.taint_id = ::std::option::Option::Some(v);
    }

    pub fn get_taint_id(&self) -> u64 {
        self.taint_id.unwrap_or(0)
    }

    // optional bool taint_multiple = 3;

    pub fn clear_taint_multiple(&mut self) {
        self.taint_multiple = ::std::option::Option::None;
    }

    pub fn has_taint_multiple(&self) -> bool {
        self.taint_multiple.is_some()
    }

    // Param is passed by value, moved
    pub fn set_taint_multiple(&mut self, v: bool) {
        self.taint_multiple = ::std::option::Option::Some(v);
    }

    pub fn get_taint_multiple(&self) -> bool {
        self.taint_multiple.unwrap_or(false)
    }
}

impl ::protobuf::Message for taint_info {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.no_taint = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.taint_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.taint_multiple = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.no_taint {
            my_size += 2;
        }
        if let Some(v) = self.taint_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.taint_multiple {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.no_taint {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.taint_id {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.taint_multiple {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> taint_info {
        taint_info::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "no_taint",
                    |m: &taint_info| { &m.no_taint },
                    |m: &mut taint_info| { &mut m.no_taint },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "taint_id",
                    |m: &taint_info| { &m.taint_id },
                    |m: &mut taint_info| { &mut m.taint_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "taint_multiple",
                    |m: &taint_info| { &m.taint_multiple },
                    |m: &mut taint_info| { &mut m.taint_multiple },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<taint_info>(
                    "taint_info",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static taint_info {
        static mut instance: ::protobuf::lazy::Lazy<taint_info> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const taint_info,
        };
        unsafe {
            instance.get(taint_info::new)
        }
    }
}

impl ::protobuf::Clear for taint_info {
    fn clear(&mut self) {
        self.clear_no_taint();
        self.clear_taint_id();
        self.clear_taint_multiple();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for taint_info {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for taint_info {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct std_frame {
    // message fields
    address: ::std::option::Option<u64>,
    thread_id: ::std::option::Option<u64>,
    rawbytes: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    operand_pre_list: ::protobuf::SingularPtrField<operand_value_list>,
    operand_post_list: ::protobuf::SingularPtrField<operand_value_list>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl std_frame {
    pub fn new() -> std_frame {
        ::std::default::Default::default()
    }

    // required uint64 address = 1;

    pub fn clear_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: u64) {
        self.address = ::std::option::Option::Some(v);
    }

    pub fn get_address(&self) -> u64 {
        self.address.unwrap_or(0)
    }

    // required uint64 thread_id = 2;

    pub fn clear_thread_id(&mut self) {
        self.thread_id = ::std::option::Option::None;
    }

    pub fn has_thread_id(&self) -> bool {
        self.thread_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thread_id(&mut self, v: u64) {
        self.thread_id = ::std::option::Option::Some(v);
    }

    pub fn get_thread_id(&self) -> u64 {
        self.thread_id.unwrap_or(0)
    }

    // required bytes rawbytes = 3;

    pub fn clear_rawbytes(&mut self) {
        self.rawbytes.clear();
    }

    pub fn has_rawbytes(&self) -> bool {
        self.rawbytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rawbytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.rawbytes = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rawbytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.rawbytes.is_none() {
            self.rawbytes.set_default();
        }
        self.rawbytes.as_mut().unwrap()
    }

    // Take field
    pub fn take_rawbytes(&mut self) -> ::std::vec::Vec<u8> {
        self.rawbytes.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_rawbytes(&self) -> &[u8] {
        match self.rawbytes.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // required .operand_value_list operand_pre_list = 4;

    pub fn clear_operand_pre_list(&mut self) {
        self.operand_pre_list.clear();
    }

    pub fn has_operand_pre_list(&self) -> bool {
        self.operand_pre_list.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operand_pre_list(&mut self, v: operand_value_list) {
        self.operand_pre_list = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_operand_pre_list(&mut self) -> &mut operand_value_list {
        if self.operand_pre_list.is_none() {
            self.operand_pre_list.set_default();
        }
        self.operand_pre_list.as_mut().unwrap()
    }

    // Take field
    pub fn take_operand_pre_list(&mut self) -> operand_value_list {
        self.operand_pre_list.take().unwrap_or_else(|| operand_value_list::new())
    }

    pub fn get_operand_pre_list(&self) -> &operand_value_list {
        self.operand_pre_list.as_ref().unwrap_or_else(|| operand_value_list::default_instance())
    }

    // optional .operand_value_list operand_post_list = 5;

    pub fn clear_operand_post_list(&mut self) {
        self.operand_post_list.clear();
    }

    pub fn has_operand_post_list(&self) -> bool {
        self.operand_post_list.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operand_post_list(&mut self, v: operand_value_list) {
        self.operand_post_list = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_operand_post_list(&mut self) -> &mut operand_value_list {
        if self.operand_post_list.is_none() {
            self.operand_post_list.set_default();
        }
        self.operand_post_list.as_mut().unwrap()
    }

    // Take field
    pub fn take_operand_post_list(&mut self) -> operand_value_list {
        self.operand_post_list.take().unwrap_or_else(|| operand_value_list::new())
    }

    pub fn get_operand_post_list(&self) -> &operand_value_list {
        self.operand_post_list.as_ref().unwrap_or_else(|| operand_value_list::default_instance())
    }
}

impl ::protobuf::Message for std_frame {
    fn is_initialized(&self) -> bool {
        if self.address.is_none() {
            return false;
        }
        if self.thread_id.is_none() {
            return false;
        }
        if self.rawbytes.is_none() {
            return false;
        }
        if self.operand_pre_list.is_none() {
            return false;
        }
        for v in &self.operand_pre_list {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.operand_post_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.address = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.thread_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.rawbytes)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.operand_pre_list)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.operand_post_list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.address {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.thread_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.rawbytes.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(ref v) = self.operand_pre_list.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.operand_post_list.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.address {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.thread_id {
            os.write_uint64(2, v)?;
        }
        if let Some(ref v) = self.rawbytes.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(ref v) = self.operand_pre_list.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.operand_post_list.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> std_frame {
        std_frame::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "address",
                    |m: &std_frame| { &m.address },
                    |m: &mut std_frame| { &mut m.address },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "thread_id",
                    |m: &std_frame| { &m.thread_id },
                    |m: &mut std_frame| { &mut m.thread_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "rawbytes",
                    |m: &std_frame| { &m.rawbytes },
                    |m: &mut std_frame| { &mut m.rawbytes },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<operand_value_list>>(
                    "operand_pre_list",
                    |m: &std_frame| { &m.operand_pre_list },
                    |m: &mut std_frame| { &mut m.operand_pre_list },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<operand_value_list>>(
                    "operand_post_list",
                    |m: &std_frame| { &m.operand_post_list },
                    |m: &mut std_frame| { &mut m.operand_post_list },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<std_frame>(
                    "std_frame",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static std_frame {
        static mut instance: ::protobuf::lazy::Lazy<std_frame> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const std_frame,
        };
        unsafe {
            instance.get(std_frame::new)
        }
    }
}

impl ::protobuf::Clear for std_frame {
    fn clear(&mut self) {
        self.clear_address();
        self.clear_thread_id();
        self.clear_rawbytes();
        self.clear_operand_pre_list();
        self.clear_operand_post_list();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for std_frame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for std_frame {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct syscall_frame {
    // message fields
    address: ::std::option::Option<u64>,
    thread_id: ::std::option::Option<u64>,
    number: ::std::option::Option<u64>,
    argument_list: ::protobuf::SingularPtrField<argument_list>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl syscall_frame {
    pub fn new() -> syscall_frame {
        ::std::default::Default::default()
    }

    // required uint64 address = 1;

    pub fn clear_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: u64) {
        self.address = ::std::option::Option::Some(v);
    }

    pub fn get_address(&self) -> u64 {
        self.address.unwrap_or(0)
    }

    // required uint64 thread_id = 2;

    pub fn clear_thread_id(&mut self) {
        self.thread_id = ::std::option::Option::None;
    }

    pub fn has_thread_id(&self) -> bool {
        self.thread_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thread_id(&mut self, v: u64) {
        self.thread_id = ::std::option::Option::Some(v);
    }

    pub fn get_thread_id(&self) -> u64 {
        self.thread_id.unwrap_or(0)
    }

    // required uint64 number = 3;

    pub fn clear_number(&mut self) {
        self.number = ::std::option::Option::None;
    }

    pub fn has_number(&self) -> bool {
        self.number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_number(&mut self, v: u64) {
        self.number = ::std::option::Option::Some(v);
    }

    pub fn get_number(&self) -> u64 {
        self.number.unwrap_or(0)
    }

    // required .argument_list argument_list = 4;

    pub fn clear_argument_list(&mut self) {
        self.argument_list.clear();
    }

    pub fn has_argument_list(&self) -> bool {
        self.argument_list.is_some()
    }

    // Param is passed by value, moved
    pub fn set_argument_list(&mut self, v: argument_list) {
        self.argument_list = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_argument_list(&mut self) -> &mut argument_list {
        if self.argument_list.is_none() {
            self.argument_list.set_default();
        }
        self.argument_list.as_mut().unwrap()
    }

    // Take field
    pub fn take_argument_list(&mut self) -> argument_list {
        self.argument_list.take().unwrap_or_else(|| argument_list::new())
    }

    pub fn get_argument_list(&self) -> &argument_list {
        self.argument_list.as_ref().unwrap_or_else(|| argument_list::default_instance())
    }
}

impl ::protobuf::Message for syscall_frame {
    fn is_initialized(&self) -> bool {
        if self.address.is_none() {
            return false;
        }
        if self.thread_id.is_none() {
            return false;
        }
        if self.number.is_none() {
            return false;
        }
        if self.argument_list.is_none() {
            return false;
        }
        for v in &self.argument_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.address = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.thread_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.number = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.argument_list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.address {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.thread_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.number {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.argument_list.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.address {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.thread_id {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.number {
            os.write_uint64(3, v)?;
        }
        if let Some(ref v) = self.argument_list.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> syscall_frame {
        syscall_frame::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "address",
                    |m: &syscall_frame| { &m.address },
                    |m: &mut syscall_frame| { &mut m.address },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "thread_id",
                    |m: &syscall_frame| { &m.thread_id },
                    |m: &mut syscall_frame| { &mut m.thread_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "number",
                    |m: &syscall_frame| { &m.number },
                    |m: &mut syscall_frame| { &mut m.number },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<argument_list>>(
                    "argument_list",
                    |m: &syscall_frame| { &m.argument_list },
                    |m: &mut syscall_frame| { &mut m.argument_list },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<syscall_frame>(
                    "syscall_frame",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static syscall_frame {
        static mut instance: ::protobuf::lazy::Lazy<syscall_frame> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const syscall_frame,
        };
        unsafe {
            instance.get(syscall_frame::new)
        }
    }
}

impl ::protobuf::Clear for syscall_frame {
    fn clear(&mut self) {
        self.clear_address();
        self.clear_thread_id();
        self.clear_number();
        self.clear_argument_list();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for syscall_frame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for syscall_frame {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct argument_list {
    // message fields
    elem: ::std::vec::Vec<i64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl argument_list {
    pub fn new() -> argument_list {
        ::std::default::Default::default()
    }

    // repeated sint64 elem = 1;

    pub fn clear_elem(&mut self) {
        self.elem.clear();
    }

    // Param is passed by value, moved
    pub fn set_elem(&mut self, v: ::std::vec::Vec<i64>) {
        self.elem = v;
    }

    // Mutable pointer to the field.
    pub fn mut_elem(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.elem
    }

    // Take field
    pub fn take_elem(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.elem, ::std::vec::Vec::new())
    }

    pub fn get_elem(&self) -> &[i64] {
        &self.elem
    }
}

impl ::protobuf::Message for argument_list {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_sint64_into(wire_type, is, &mut self.elem)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.elem {
            my_size += ::protobuf::rt::value_varint_zigzag_size(1, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.elem {
            os.write_sint64(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> argument_list {
        argument_list::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                    "elem",
                    |m: &argument_list| { &m.elem },
                    |m: &mut argument_list| { &mut m.elem },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<argument_list>(
                    "argument_list",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static argument_list {
        static mut instance: ::protobuf::lazy::Lazy<argument_list> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const argument_list,
        };
        unsafe {
            instance.get(argument_list::new)
        }
    }
}

impl ::protobuf::Clear for argument_list {
    fn clear(&mut self) {
        self.clear_elem();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for argument_list {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for argument_list {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct exception_frame {
    // message fields
    exception_number: ::std::option::Option<u64>,
    thread_id: ::std::option::Option<u64>,
    from_addr: ::std::option::Option<u64>,
    to_addr: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl exception_frame {
    pub fn new() -> exception_frame {
        ::std::default::Default::default()
    }

    // required uint64 exception_number = 1;

    pub fn clear_exception_number(&mut self) {
        self.exception_number = ::std::option::Option::None;
    }

    pub fn has_exception_number(&self) -> bool {
        self.exception_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_exception_number(&mut self, v: u64) {
        self.exception_number = ::std::option::Option::Some(v);
    }

    pub fn get_exception_number(&self) -> u64 {
        self.exception_number.unwrap_or(0)
    }

    // optional uint64 thread_id = 2;

    pub fn clear_thread_id(&mut self) {
        self.thread_id = ::std::option::Option::None;
    }

    pub fn has_thread_id(&self) -> bool {
        self.thread_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thread_id(&mut self, v: u64) {
        self.thread_id = ::std::option::Option::Some(v);
    }

    pub fn get_thread_id(&self) -> u64 {
        self.thread_id.unwrap_or(0)
    }

    // optional uint64 from_addr = 3;

    pub fn clear_from_addr(&mut self) {
        self.from_addr = ::std::option::Option::None;
    }

    pub fn has_from_addr(&self) -> bool {
        self.from_addr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_addr(&mut self, v: u64) {
        self.from_addr = ::std::option::Option::Some(v);
    }

    pub fn get_from_addr(&self) -> u64 {
        self.from_addr.unwrap_or(0)
    }

    // optional uint64 to_addr = 4;

    pub fn clear_to_addr(&mut self) {
        self.to_addr = ::std::option::Option::None;
    }

    pub fn has_to_addr(&self) -> bool {
        self.to_addr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_addr(&mut self, v: u64) {
        self.to_addr = ::std::option::Option::Some(v);
    }

    pub fn get_to_addr(&self) -> u64 {
        self.to_addr.unwrap_or(0)
    }
}

impl ::protobuf::Message for exception_frame {
    fn is_initialized(&self) -> bool {
        if self.exception_number.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.exception_number = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.thread_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.from_addr = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.to_addr = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.exception_number {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.thread_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.from_addr {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.to_addr {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.exception_number {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.thread_id {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.from_addr {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.to_addr {
            os.write_uint64(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> exception_frame {
        exception_frame::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "exception_number",
                    |m: &exception_frame| { &m.exception_number },
                    |m: &mut exception_frame| { &mut m.exception_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "thread_id",
                    |m: &exception_frame| { &m.thread_id },
                    |m: &mut exception_frame| { &mut m.thread_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "from_addr",
                    |m: &exception_frame| { &m.from_addr },
                    |m: &mut exception_frame| { &mut m.from_addr },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "to_addr",
                    |m: &exception_frame| { &m.to_addr },
                    |m: &mut exception_frame| { &mut m.to_addr },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<exception_frame>(
                    "exception_frame",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static exception_frame {
        static mut instance: ::protobuf::lazy::Lazy<exception_frame> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const exception_frame,
        };
        unsafe {
            instance.get(exception_frame::new)
        }
    }
}

impl ::protobuf::Clear for exception_frame {
    fn clear(&mut self) {
        self.clear_exception_number();
        self.clear_thread_id();
        self.clear_from_addr();
        self.clear_to_addr();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for exception_frame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for exception_frame {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct taint_intro_frame {
    // message fields
    taint_intro_list: ::protobuf::SingularPtrField<taint_intro_list>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl taint_intro_frame {
    pub fn new() -> taint_intro_frame {
        ::std::default::Default::default()
    }

    // required .taint_intro_list taint_intro_list = 1;

    pub fn clear_taint_intro_list(&mut self) {
        self.taint_intro_list.clear();
    }

    pub fn has_taint_intro_list(&self) -> bool {
        self.taint_intro_list.is_some()
    }

    // Param is passed by value, moved
    pub fn set_taint_intro_list(&mut self, v: taint_intro_list) {
        self.taint_intro_list = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_taint_intro_list(&mut self) -> &mut taint_intro_list {
        if self.taint_intro_list.is_none() {
            self.taint_intro_list.set_default();
        }
        self.taint_intro_list.as_mut().unwrap()
    }

    // Take field
    pub fn take_taint_intro_list(&mut self) -> taint_intro_list {
        self.taint_intro_list.take().unwrap_or_else(|| taint_intro_list::new())
    }

    pub fn get_taint_intro_list(&self) -> &taint_intro_list {
        self.taint_intro_list.as_ref().unwrap_or_else(|| taint_intro_list::default_instance())
    }
}

impl ::protobuf::Message for taint_intro_frame {
    fn is_initialized(&self) -> bool {
        if self.taint_intro_list.is_none() {
            return false;
        }
        for v in &self.taint_intro_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.taint_intro_list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.taint_intro_list.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.taint_intro_list.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> taint_intro_frame {
        taint_intro_frame::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<taint_intro_list>>(
                    "taint_intro_list",
                    |m: &taint_intro_frame| { &m.taint_intro_list },
                    |m: &mut taint_intro_frame| { &mut m.taint_intro_list },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<taint_intro_frame>(
                    "taint_intro_frame",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static taint_intro_frame {
        static mut instance: ::protobuf::lazy::Lazy<taint_intro_frame> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const taint_intro_frame,
        };
        unsafe {
            instance.get(taint_intro_frame::new)
        }
    }
}

impl ::protobuf::Clear for taint_intro_frame {
    fn clear(&mut self) {
        self.clear_taint_intro_list();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for taint_intro_frame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for taint_intro_frame {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct taint_intro_list {
    // message fields
    elem: ::protobuf::RepeatedField<taint_intro>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl taint_intro_list {
    pub fn new() -> taint_intro_list {
        ::std::default::Default::default()
    }

    // repeated .taint_intro elem = 1;

    pub fn clear_elem(&mut self) {
        self.elem.clear();
    }

    // Param is passed by value, moved
    pub fn set_elem(&mut self, v: ::protobuf::RepeatedField<taint_intro>) {
        self.elem = v;
    }

    // Mutable pointer to the field.
    pub fn mut_elem(&mut self) -> &mut ::protobuf::RepeatedField<taint_intro> {
        &mut self.elem
    }

    // Take field
    pub fn take_elem(&mut self) -> ::protobuf::RepeatedField<taint_intro> {
        ::std::mem::replace(&mut self.elem, ::protobuf::RepeatedField::new())
    }

    pub fn get_elem(&self) -> &[taint_intro] {
        &self.elem
    }
}

impl ::protobuf::Message for taint_intro_list {
    fn is_initialized(&self) -> bool {
        for v in &self.elem {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.elem)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.elem {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.elem {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> taint_intro_list {
        taint_intro_list::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<taint_intro>>(
                    "elem",
                    |m: &taint_intro_list| { &m.elem },
                    |m: &mut taint_intro_list| { &mut m.elem },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<taint_intro_list>(
                    "taint_intro_list",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static taint_intro_list {
        static mut instance: ::protobuf::lazy::Lazy<taint_intro_list> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const taint_intro_list,
        };
        unsafe {
            instance.get(taint_intro_list::new)
        }
    }
}

impl ::protobuf::Clear for taint_intro_list {
    fn clear(&mut self) {
        self.clear_elem();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for taint_intro_list {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for taint_intro_list {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct taint_intro {
    // message fields
    addr: ::std::option::Option<u64>,
    taint_id: ::std::option::Option<u64>,
    value: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    source_name: ::protobuf::SingularField<::std::string::String>,
    offset: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl taint_intro {
    pub fn new() -> taint_intro {
        ::std::default::Default::default()
    }

    // required uint64 addr = 1;

    pub fn clear_addr(&mut self) {
        self.addr = ::std::option::Option::None;
    }

    pub fn has_addr(&self) -> bool {
        self.addr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_addr(&mut self, v: u64) {
        self.addr = ::std::option::Option::Some(v);
    }

    pub fn get_addr(&self) -> u64 {
        self.addr.unwrap_or(0)
    }

    // required uint64 taint_id = 2;

    pub fn clear_taint_id(&mut self) {
        self.taint_id = ::std::option::Option::None;
    }

    pub fn has_taint_id(&self) -> bool {
        self.taint_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_taint_id(&mut self, v: u64) {
        self.taint_id = ::std::option::Option::Some(v);
    }

    pub fn get_taint_id(&self) -> u64 {
        self.taint_id.unwrap_or(0)
    }

    // optional bytes value = 3;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_value(&self) -> &[u8] {
        match self.value.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional string source_name = 4;

    pub fn clear_source_name(&mut self) {
        self.source_name.clear();
    }

    pub fn has_source_name(&self) -> bool {
        self.source_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_name(&mut self, v: ::std::string::String) {
        self.source_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_name(&mut self) -> &mut ::std::string::String {
        if self.source_name.is_none() {
            self.source_name.set_default();
        }
        self.source_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_name(&mut self) -> ::std::string::String {
        self.source_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_source_name(&self) -> &str {
        match self.source_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional uint64 offset = 5;

    pub fn clear_offset(&mut self) {
        self.offset = ::std::option::Option::None;
    }

    pub fn has_offset(&self) -> bool {
        self.offset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: u64) {
        self.offset = ::std::option::Option::Some(v);
    }

    pub fn get_offset(&self) -> u64 {
        self.offset.unwrap_or(0)
    }
}

impl ::protobuf::Message for taint_intro {
    fn is_initialized(&self) -> bool {
        if self.addr.is_none() {
            return false;
        }
        if self.taint_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.addr = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.taint_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.value)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.source_name)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.offset = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.addr {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.taint_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.value.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(ref v) = self.source_name.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.offset {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.addr {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.taint_id {
            os.write_uint64(2, v)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(ref v) = self.source_name.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(v) = self.offset {
            os.write_uint64(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> taint_intro {
        taint_intro::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "addr",
                    |m: &taint_intro| { &m.addr },
                    |m: &mut taint_intro| { &mut m.addr },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "taint_id",
                    |m: &taint_intro| { &m.taint_id },
                    |m: &mut taint_intro| { &mut m.taint_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "value",
                    |m: &taint_intro| { &m.value },
                    |m: &mut taint_intro| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "source_name",
                    |m: &taint_intro| { &m.source_name },
                    |m: &mut taint_intro| { &mut m.source_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "offset",
                    |m: &taint_intro| { &m.offset },
                    |m: &mut taint_intro| { &mut m.offset },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<taint_intro>(
                    "taint_intro",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static taint_intro {
        static mut instance: ::protobuf::lazy::Lazy<taint_intro> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const taint_intro,
        };
        unsafe {
            instance.get(taint_intro::new)
        }
    }
}

impl ::protobuf::Clear for taint_intro {
    fn clear(&mut self) {
        self.clear_addr();
        self.clear_taint_id();
        self.clear_value();
        self.clear_source_name();
        self.clear_offset();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for taint_intro {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for taint_intro {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct modload_frame {
    // message fields
    module_name: ::protobuf::SingularField<::std::string::String>,
    low_address: ::std::option::Option<u64>,
    high_address: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl modload_frame {
    pub fn new() -> modload_frame {
        ::std::default::Default::default()
    }

    // required string module_name = 1;

    pub fn clear_module_name(&mut self) {
        self.module_name.clear();
    }

    pub fn has_module_name(&self) -> bool {
        self.module_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_module_name(&mut self, v: ::std::string::String) {
        self.module_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_module_name(&mut self) -> &mut ::std::string::String {
        if self.module_name.is_none() {
            self.module_name.set_default();
        }
        self.module_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_module_name(&mut self) -> ::std::string::String {
        self.module_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_module_name(&self) -> &str {
        match self.module_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // required uint64 low_address = 2;

    pub fn clear_low_address(&mut self) {
        self.low_address = ::std::option::Option::None;
    }

    pub fn has_low_address(&self) -> bool {
        self.low_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_low_address(&mut self, v: u64) {
        self.low_address = ::std::option::Option::Some(v);
    }

    pub fn get_low_address(&self) -> u64 {
        self.low_address.unwrap_or(0)
    }

    // required uint64 high_address = 3;

    pub fn clear_high_address(&mut self) {
        self.high_address = ::std::option::Option::None;
    }

    pub fn has_high_address(&self) -> bool {
        self.high_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_high_address(&mut self, v: u64) {
        self.high_address = ::std::option::Option::Some(v);
    }

    pub fn get_high_address(&self) -> u64 {
        self.high_address.unwrap_or(0)
    }
}

impl ::protobuf::Message for modload_frame {
    fn is_initialized(&self) -> bool {
        if self.module_name.is_none() {
            return false;
        }
        if self.low_address.is_none() {
            return false;
        }
        if self.high_address.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.module_name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.low_address = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.high_address = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.module_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.low_address {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.high_address {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.module_name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.low_address {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.high_address {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> modload_frame {
        modload_frame::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "module_name",
                    |m: &modload_frame| { &m.module_name },
                    |m: &mut modload_frame| { &mut m.module_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "low_address",
                    |m: &modload_frame| { &m.low_address },
                    |m: &mut modload_frame| { &mut m.low_address },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "high_address",
                    |m: &modload_frame| { &m.high_address },
                    |m: &mut modload_frame| { &mut m.high_address },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<modload_frame>(
                    "modload_frame",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static modload_frame {
        static mut instance: ::protobuf::lazy::Lazy<modload_frame> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const modload_frame,
        };
        unsafe {
            instance.get(modload_frame::new)
        }
    }
}

impl ::protobuf::Clear for modload_frame {
    fn clear(&mut self) {
        self.clear_module_name();
        self.clear_low_address();
        self.clear_high_address();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for modload_frame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for modload_frame {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct key_frame {
    // message fields
    tagged_value_lists: ::protobuf::SingularPtrField<tagged_value_lists>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl key_frame {
    pub fn new() -> key_frame {
        ::std::default::Default::default()
    }

    // required .tagged_value_lists tagged_value_lists = 1;

    pub fn clear_tagged_value_lists(&mut self) {
        self.tagged_value_lists.clear();
    }

    pub fn has_tagged_value_lists(&self) -> bool {
        self.tagged_value_lists.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tagged_value_lists(&mut self, v: tagged_value_lists) {
        self.tagged_value_lists = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tagged_value_lists(&mut self) -> &mut tagged_value_lists {
        if self.tagged_value_lists.is_none() {
            self.tagged_value_lists.set_default();
        }
        self.tagged_value_lists.as_mut().unwrap()
    }

    // Take field
    pub fn take_tagged_value_lists(&mut self) -> tagged_value_lists {
        self.tagged_value_lists.take().unwrap_or_else(|| tagged_value_lists::new())
    }

    pub fn get_tagged_value_lists(&self) -> &tagged_value_lists {
        self.tagged_value_lists.as_ref().unwrap_or_else(|| tagged_value_lists::default_instance())
    }
}

impl ::protobuf::Message for key_frame {
    fn is_initialized(&self) -> bool {
        if self.tagged_value_lists.is_none() {
            return false;
        }
        for v in &self.tagged_value_lists {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tagged_value_lists)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.tagged_value_lists.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.tagged_value_lists.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> key_frame {
        key_frame::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<tagged_value_lists>>(
                    "tagged_value_lists",
                    |m: &key_frame| { &m.tagged_value_lists },
                    |m: &mut key_frame| { &mut m.tagged_value_lists },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<key_frame>(
                    "key_frame",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static key_frame {
        static mut instance: ::protobuf::lazy::Lazy<key_frame> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const key_frame,
        };
        unsafe {
            instance.get(key_frame::new)
        }
    }
}

impl ::protobuf::Clear for key_frame {
    fn clear(&mut self) {
        self.clear_tagged_value_lists();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for key_frame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for key_frame {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct tagged_value_lists {
    // message fields
    elem: ::protobuf::RepeatedField<tagged_value_list>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl tagged_value_lists {
    pub fn new() -> tagged_value_lists {
        ::std::default::Default::default()
    }

    // repeated .tagged_value_list elem = 1;

    pub fn clear_elem(&mut self) {
        self.elem.clear();
    }

    // Param is passed by value, moved
    pub fn set_elem(&mut self, v: ::protobuf::RepeatedField<tagged_value_list>) {
        self.elem = v;
    }

    // Mutable pointer to the field.
    pub fn mut_elem(&mut self) -> &mut ::protobuf::RepeatedField<tagged_value_list> {
        &mut self.elem
    }

    // Take field
    pub fn take_elem(&mut self) -> ::protobuf::RepeatedField<tagged_value_list> {
        ::std::mem::replace(&mut self.elem, ::protobuf::RepeatedField::new())
    }

    pub fn get_elem(&self) -> &[tagged_value_list] {
        &self.elem
    }
}

impl ::protobuf::Message for tagged_value_lists {
    fn is_initialized(&self) -> bool {
        for v in &self.elem {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.elem)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.elem {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.elem {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> tagged_value_lists {
        tagged_value_lists::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<tagged_value_list>>(
                    "elem",
                    |m: &tagged_value_lists| { &m.elem },
                    |m: &mut tagged_value_lists| { &mut m.elem },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<tagged_value_lists>(
                    "tagged_value_lists",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static tagged_value_lists {
        static mut instance: ::protobuf::lazy::Lazy<tagged_value_lists> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const tagged_value_lists,
        };
        unsafe {
            instance.get(tagged_value_lists::new)
        }
    }
}

impl ::protobuf::Clear for tagged_value_lists {
    fn clear(&mut self) {
        self.clear_elem();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for tagged_value_lists {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for tagged_value_lists {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct tagged_value_list {
    // message fields
    value_source_tag: ::protobuf::SingularPtrField<value_source_tag>,
    value_list: ::protobuf::SingularPtrField<value_list>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl tagged_value_list {
    pub fn new() -> tagged_value_list {
        ::std::default::Default::default()
    }

    // required .value_source_tag value_source_tag = 1;

    pub fn clear_value_source_tag(&mut self) {
        self.value_source_tag.clear();
    }

    pub fn has_value_source_tag(&self) -> bool {
        self.value_source_tag.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value_source_tag(&mut self, v: value_source_tag) {
        self.value_source_tag = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value_source_tag(&mut self) -> &mut value_source_tag {
        if self.value_source_tag.is_none() {
            self.value_source_tag.set_default();
        }
        self.value_source_tag.as_mut().unwrap()
    }

    // Take field
    pub fn take_value_source_tag(&mut self) -> value_source_tag {
        self.value_source_tag.take().unwrap_or_else(|| value_source_tag::new())
    }

    pub fn get_value_source_tag(&self) -> &value_source_tag {
        self.value_source_tag.as_ref().unwrap_or_else(|| value_source_tag::default_instance())
    }

    // required .value_list value_list = 2;

    pub fn clear_value_list(&mut self) {
        self.value_list.clear();
    }

    pub fn has_value_list(&self) -> bool {
        self.value_list.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value_list(&mut self, v: value_list) {
        self.value_list = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value_list(&mut self) -> &mut value_list {
        if self.value_list.is_none() {
            self.value_list.set_default();
        }
        self.value_list.as_mut().unwrap()
    }

    // Take field
    pub fn take_value_list(&mut self) -> value_list {
        self.value_list.take().unwrap_or_else(|| value_list::new())
    }

    pub fn get_value_list(&self) -> &value_list {
        self.value_list.as_ref().unwrap_or_else(|| value_list::default_instance())
    }
}

impl ::protobuf::Message for tagged_value_list {
    fn is_initialized(&self) -> bool {
        if self.value_source_tag.is_none() {
            return false;
        }
        if self.value_list.is_none() {
            return false;
        }
        for v in &self.value_source_tag {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.value_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value_source_tag)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value_list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.value_source_tag.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.value_list.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.value_source_tag.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.value_list.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> tagged_value_list {
        tagged_value_list::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<value_source_tag>>(
                    "value_source_tag",
                    |m: &tagged_value_list| { &m.value_source_tag },
                    |m: &mut tagged_value_list| { &mut m.value_source_tag },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<value_list>>(
                    "value_list",
                    |m: &tagged_value_list| { &m.value_list },
                    |m: &mut tagged_value_list| { &mut m.value_list },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<tagged_value_list>(
                    "tagged_value_list",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static tagged_value_list {
        static mut instance: ::protobuf::lazy::Lazy<tagged_value_list> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const tagged_value_list,
        };
        unsafe {
            instance.get(tagged_value_list::new)
        }
    }
}

impl ::protobuf::Clear for tagged_value_list {
    fn clear(&mut self) {
        self.clear_value_source_tag();
        self.clear_value_list();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for tagged_value_list {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for tagged_value_list {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct value_source_tag {
    // message fields
    no_thread_id: ::std::option::Option<bool>,
    thread_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl value_source_tag {
    pub fn new() -> value_source_tag {
        ::std::default::Default::default()
    }

    // optional bool no_thread_id = 1;

    pub fn clear_no_thread_id(&mut self) {
        self.no_thread_id = ::std::option::Option::None;
    }

    pub fn has_no_thread_id(&self) -> bool {
        self.no_thread_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_no_thread_id(&mut self, v: bool) {
        self.no_thread_id = ::std::option::Option::Some(v);
    }

    pub fn get_no_thread_id(&self) -> bool {
        self.no_thread_id.unwrap_or(false)
    }

    // optional uint64 thread_id = 2;

    pub fn clear_thread_id(&mut self) {
        self.thread_id = ::std::option::Option::None;
    }

    pub fn has_thread_id(&self) -> bool {
        self.thread_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thread_id(&mut self, v: u64) {
        self.thread_id = ::std::option::Option::Some(v);
    }

    pub fn get_thread_id(&self) -> u64 {
        self.thread_id.unwrap_or(0)
    }
}

impl ::protobuf::Message for value_source_tag {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.no_thread_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.thread_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.no_thread_id {
            my_size += 2;
        }
        if let Some(v) = self.thread_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.no_thread_id {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.thread_id {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> value_source_tag {
        value_source_tag::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "no_thread_id",
                    |m: &value_source_tag| { &m.no_thread_id },
                    |m: &mut value_source_tag| { &mut m.no_thread_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "thread_id",
                    |m: &value_source_tag| { &m.thread_id },
                    |m: &mut value_source_tag| { &mut m.thread_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<value_source_tag>(
                    "value_source_tag",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static value_source_tag {
        static mut instance: ::protobuf::lazy::Lazy<value_source_tag> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const value_source_tag,
        };
        unsafe {
            instance.get(value_source_tag::new)
        }
    }
}

impl ::protobuf::Clear for value_source_tag {
    fn clear(&mut self) {
        self.clear_no_thread_id();
        self.clear_thread_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for value_source_tag {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for value_source_tag {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct value_list {
    // message fields
    elem: ::protobuf::RepeatedField<value_info>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl value_list {
    pub fn new() -> value_list {
        ::std::default::Default::default()
    }

    // repeated .value_info elem = 1;

    pub fn clear_elem(&mut self) {
        self.elem.clear();
    }

    // Param is passed by value, moved
    pub fn set_elem(&mut self, v: ::protobuf::RepeatedField<value_info>) {
        self.elem = v;
    }

    // Mutable pointer to the field.
    pub fn mut_elem(&mut self) -> &mut ::protobuf::RepeatedField<value_info> {
        &mut self.elem
    }

    // Take field
    pub fn take_elem(&mut self) -> ::protobuf::RepeatedField<value_info> {
        ::std::mem::replace(&mut self.elem, ::protobuf::RepeatedField::new())
    }

    pub fn get_elem(&self) -> &[value_info] {
        &self.elem
    }
}

impl ::protobuf::Message for value_list {
    fn is_initialized(&self) -> bool {
        for v in &self.elem {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.elem)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.elem {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.elem {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> value_list {
        value_list::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<value_info>>(
                    "elem",
                    |m: &value_list| { &m.elem },
                    |m: &mut value_list| { &mut m.elem },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<value_list>(
                    "value_list",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static value_list {
        static mut instance: ::protobuf::lazy::Lazy<value_list> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const value_list,
        };
        unsafe {
            instance.get(value_list::new)
        }
    }
}

impl ::protobuf::Clear for value_list {
    fn clear(&mut self) {
        self.clear_elem();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for value_list {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for value_list {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct value_info {
    // message fields
    operand_info_specific: ::protobuf::SingularPtrField<operand_info_specific>,
    bit_length: ::std::option::Option<i32>,
    taint_info: ::protobuf::SingularPtrField<taint_info>,
    value: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl value_info {
    pub fn new() -> value_info {
        ::std::default::Default::default()
    }

    // required .operand_info_specific operand_info_specific = 1;

    pub fn clear_operand_info_specific(&mut self) {
        self.operand_info_specific.clear();
    }

    pub fn has_operand_info_specific(&self) -> bool {
        self.operand_info_specific.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operand_info_specific(&mut self, v: operand_info_specific) {
        self.operand_info_specific = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_operand_info_specific(&mut self) -> &mut operand_info_specific {
        if self.operand_info_specific.is_none() {
            self.operand_info_specific.set_default();
        }
        self.operand_info_specific.as_mut().unwrap()
    }

    // Take field
    pub fn take_operand_info_specific(&mut self) -> operand_info_specific {
        self.operand_info_specific.take().unwrap_or_else(|| operand_info_specific::new())
    }

    pub fn get_operand_info_specific(&self) -> &operand_info_specific {
        self.operand_info_specific.as_ref().unwrap_or_else(|| operand_info_specific::default_instance())
    }

    // required sint32 bit_length = 2;

    pub fn clear_bit_length(&mut self) {
        self.bit_length = ::std::option::Option::None;
    }

    pub fn has_bit_length(&self) -> bool {
        self.bit_length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bit_length(&mut self, v: i32) {
        self.bit_length = ::std::option::Option::Some(v);
    }

    pub fn get_bit_length(&self) -> i32 {
        self.bit_length.unwrap_or(0)
    }

    // optional .taint_info taint_info = 3;

    pub fn clear_taint_info(&mut self) {
        self.taint_info.clear();
    }

    pub fn has_taint_info(&self) -> bool {
        self.taint_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_taint_info(&mut self, v: taint_info) {
        self.taint_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_taint_info(&mut self) -> &mut taint_info {
        if self.taint_info.is_none() {
            self.taint_info.set_default();
        }
        self.taint_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_taint_info(&mut self) -> taint_info {
        self.taint_info.take().unwrap_or_else(|| taint_info::new())
    }

    pub fn get_taint_info(&self) -> &taint_info {
        self.taint_info.as_ref().unwrap_or_else(|| taint_info::default_instance())
    }

    // required bytes value = 4;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_value(&self) -> &[u8] {
        match self.value.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for value_info {
    fn is_initialized(&self) -> bool {
        if self.operand_info_specific.is_none() {
            return false;
        }
        if self.bit_length.is_none() {
            return false;
        }
        if self.value.is_none() {
            return false;
        }
        for v in &self.operand_info_specific {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.taint_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.operand_info_specific)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.bit_length = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.taint_info)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.operand_info_specific.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.bit_length {
            my_size += ::protobuf::rt::value_varint_zigzag_size(2, v);
        }
        if let Some(ref v) = self.taint_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.value.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.operand_info_specific.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.bit_length {
            os.write_sint32(2, v)?;
        }
        if let Some(ref v) = self.taint_info.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_bytes(4, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> value_info {
        value_info::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<operand_info_specific>>(
                    "operand_info_specific",
                    |m: &value_info| { &m.operand_info_specific },
                    |m: &mut value_info| { &mut m.operand_info_specific },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                    "bit_length",
                    |m: &value_info| { &m.bit_length },
                    |m: &mut value_info| { &mut m.bit_length },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<taint_info>>(
                    "taint_info",
                    |m: &value_info| { &m.taint_info },
                    |m: &mut value_info| { &mut m.taint_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "value",
                    |m: &value_info| { &m.value },
                    |m: &mut value_info| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<value_info>(
                    "value_info",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static value_info {
        static mut instance: ::protobuf::lazy::Lazy<value_info> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const value_info,
        };
        unsafe {
            instance.get(value_info::new)
        }
    }
}

impl ::protobuf::Clear for value_info {
    fn clear(&mut self) {
        self.clear_operand_info_specific();
        self.clear_bit_length();
        self.clear_taint_info();
        self.clear_value();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for value_info {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for value_info {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct block_frame {
    // message fields
    address: ::std::option::Option<u64>,
    thread_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl block_frame {
    pub fn new() -> block_frame {
        ::std::default::Default::default()
    }

    // required uint64 address = 1;

    pub fn clear_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: u64) {
        self.address = ::std::option::Option::Some(v);
    }

    pub fn get_address(&self) -> u64 {
        self.address.unwrap_or(0)
    }

    // required uint64 thread_id = 2;

    pub fn clear_thread_id(&mut self) {
        self.thread_id = ::std::option::Option::None;
    }

    pub fn has_thread_id(&self) -> bool {
        self.thread_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thread_id(&mut self, v: u64) {
        self.thread_id = ::std::option::Option::Some(v);
    }

    pub fn get_thread_id(&self) -> u64 {
        self.thread_id.unwrap_or(0)
    }
}

impl ::protobuf::Message for block_frame {
    fn is_initialized(&self) -> bool {
        if self.address.is_none() {
            return false;
        }
        if self.thread_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.address = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.thread_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.address {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.thread_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.address {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.thread_id {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> block_frame {
        block_frame::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "address",
                    |m: &block_frame| { &m.address },
                    |m: &mut block_frame| { &mut m.address },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "thread_id",
                    |m: &block_frame| { &m.thread_id },
                    |m: &mut block_frame| { &mut m.thread_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<block_frame>(
                    "block_frame",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static block_frame {
        static mut instance: ::protobuf::lazy::Lazy<block_frame> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const block_frame,
        };
        unsafe {
            instance.get(block_frame::new)
        }
    }
}

impl ::protobuf::Clear for block_frame {
    fn clear(&mut self) {
        self.clear_address();
        self.clear_thread_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for block_frame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for block_frame {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct call_frame {
    // message fields
    address: ::std::option::Option<u64>,
    target: ::std::option::Option<u64>,
    thread_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl call_frame {
    pub fn new() -> call_frame {
        ::std::default::Default::default()
    }

    // required uint64 address = 1;

    pub fn clear_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: u64) {
        self.address = ::std::option::Option::Some(v);
    }

    pub fn get_address(&self) -> u64 {
        self.address.unwrap_or(0)
    }

    // required uint64 target = 2;

    pub fn clear_target(&mut self) {
        self.target = ::std::option::Option::None;
    }

    pub fn has_target(&self) -> bool {
        self.target.is_some()
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: u64) {
        self.target = ::std::option::Option::Some(v);
    }

    pub fn get_target(&self) -> u64 {
        self.target.unwrap_or(0)
    }

    // required uint64 thread_id = 3;

    pub fn clear_thread_id(&mut self) {
        self.thread_id = ::std::option::Option::None;
    }

    pub fn has_thread_id(&self) -> bool {
        self.thread_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thread_id(&mut self, v: u64) {
        self.thread_id = ::std::option::Option::Some(v);
    }

    pub fn get_thread_id(&self) -> u64 {
        self.thread_id.unwrap_or(0)
    }
}

impl ::protobuf::Message for call_frame {
    fn is_initialized(&self) -> bool {
        if self.address.is_none() {
            return false;
        }
        if self.target.is_none() {
            return false;
        }
        if self.thread_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.address = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.target = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.thread_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.address {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.target {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.thread_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.address {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.target {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.thread_id {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> call_frame {
        call_frame::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "address",
                    |m: &call_frame| { &m.address },
                    |m: &mut call_frame| { &mut m.address },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "target",
                    |m: &call_frame| { &m.target },
                    |m: &mut call_frame| { &mut m.target },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "thread_id",
                    |m: &call_frame| { &m.thread_id },
                    |m: &mut call_frame| { &mut m.thread_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<call_frame>(
                    "call_frame",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static call_frame {
        static mut instance: ::protobuf::lazy::Lazy<call_frame> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const call_frame,
        };
        unsafe {
            instance.get(call_frame::new)
        }
    }
}

impl ::protobuf::Clear for call_frame {
    fn clear(&mut self) {
        self.clear_address();
        self.clear_target();
        self.clear_thread_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for call_frame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for call_frame {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ret_frame {
    // message fields
    address: ::std::option::Option<u64>,
    target: ::std::option::Option<u64>,
    thread_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ret_frame {
    pub fn new() -> ret_frame {
        ::std::default::Default::default()
    }

    // required uint64 address = 1;

    pub fn clear_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: u64) {
        self.address = ::std::option::Option::Some(v);
    }

    pub fn get_address(&self) -> u64 {
        self.address.unwrap_or(0)
    }

    // required uint64 target = 2;

    pub fn clear_target(&mut self) {
        self.target = ::std::option::Option::None;
    }

    pub fn has_target(&self) -> bool {
        self.target.is_some()
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: u64) {
        self.target = ::std::option::Option::Some(v);
    }

    pub fn get_target(&self) -> u64 {
        self.target.unwrap_or(0)
    }

    // required uint64 thread_id = 3;

    pub fn clear_thread_id(&mut self) {
        self.thread_id = ::std::option::Option::None;
    }

    pub fn has_thread_id(&self) -> bool {
        self.thread_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thread_id(&mut self, v: u64) {
        self.thread_id = ::std::option::Option::Some(v);
    }

    pub fn get_thread_id(&self) -> u64 {
        self.thread_id.unwrap_or(0)
    }
}

impl ::protobuf::Message for ret_frame {
    fn is_initialized(&self) -> bool {
        if self.address.is_none() {
            return false;
        }
        if self.target.is_none() {
            return false;
        }
        if self.thread_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.address = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.target = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.thread_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.address {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.target {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.thread_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.address {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.target {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.thread_id {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ret_frame {
        ret_frame::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "address",
                    |m: &ret_frame| { &m.address },
                    |m: &mut ret_frame| { &mut m.address },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "target",
                    |m: &ret_frame| { &m.target },
                    |m: &mut ret_frame| { &mut m.target },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "thread_id",
                    |m: &ret_frame| { &m.thread_id },
                    |m: &mut ret_frame| { &mut m.thread_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ret_frame>(
                    "ret_frame",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ret_frame {
        static mut instance: ::protobuf::lazy::Lazy<ret_frame> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ret_frame,
        };
        unsafe {
            instance.get(ret_frame::new)
        }
    }
}

impl ::protobuf::Clear for ret_frame {
    fn clear(&mut self) {
        self.clear_address();
        self.clear_target();
        self.clear_thread_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ret_frame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ret_frame {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bframe.proto\"\xc2\x03\n\x05frame\x12'\n\tstd_frame\x18\x01\x20\x01\
    (\x0b2\n.std_frameR\x08stdFrame\x123\n\rsyscall_frame\x18\x02\x20\x01(\
    \x0b2\x0e.syscall_frameR\x0csyscallFrame\x129\n\x0fexception_frame\x18\
    \x03\x20\x01(\x0b2\x10.exception_frameR\x0eexceptionFrame\x12>\n\x11tain\
    t_intro_frame\x18\x04\x20\x01(\x0b2\x12.taint_intro_frameR\x0ftaintIntro\
    Frame\x123\n\rmodload_frame\x18\x05\x20\x01(\x0b2\x0e.modload_frameR\x0c\
    modloadFrame\x12'\n\tkey_frame\x18\x06\x20\x01(\x0b2\n.key_frameR\x08key\
    Frame\x12-\n\x0bblock_frame\x18\x07\x20\x01(\x0b2\x0c.block_frameR\nbloc\
    kFrame\x12*\n\ncall_frame\x18\x08\x20\x01(\x0b2\x0b.call_frameR\tcallFra\
    me\x12'\n\tret_frame\x18\t\x20\x01(\x0b2\n.ret_frameR\x08retFrame\"7\n\
    \x12operand_value_list\x12!\n\x04elem\x18\x01\x20\x03(\x0b2\r.operand_in\
    foR\x04elem\"\xf0\x01\n\x0coperand_info\x12J\n\x15operand_info_specific\
    \x18\x01\x20\x02(\x0b2\x16.operand_info_specificR\x13operandInfoSpecific\
    \x12\x1d\n\nbit_length\x18\x02\x20\x02(\x11R\tbitLength\x123\n\roperand_\
    usage\x18\x03\x20\x02(\x0b2\x0e.operand_usageR\x0coperandUsage\x12*\n\nt\
    aint_info\x18\x04\x20\x02(\x0b2\x0b.taint_infoR\ttaintInfo\x12\x14\n\x05\
    value\x18\x05\x20\x02(\x0cR\x05value\"u\n\x15operand_info_specific\x12-\
    \n\x0bmem_operand\x18\x01\x20\x01(\x0b2\x0c.mem_operandR\nmemOperand\x12\
    -\n\x0breg_operand\x18\x02\x20\x01(\x0b2\x0c.reg_operandR\nregOperand\"!\
    \n\x0breg_operand\x12\x12\n\x04name\x18\x01\x20\x02(\tR\x04name\"'\n\x0b\
    mem_operand\x12\x18\n\x07address\x18\x01\x20\x02(\x04R\x07address\"g\n\r\
    operand_usage\x12\x12\n\x04read\x18\x01\x20\x02(\x08R\x04read\x12\x18\n\
    \x07written\x18\x02\x20\x02(\x08R\x07written\x12\x14\n\x05index\x18\x03\
    \x20\x02(\x08R\x05index\x12\x12\n\x04base\x18\x04\x20\x02(\x08R\x04base\
    \"i\n\ntaint_info\x12\x19\n\x08no_taint\x18\x01\x20\x01(\x08R\x07noTaint\
    \x12\x19\n\x08taint_id\x18\x02\x20\x01(\x04R\x07taintId\x12%\n\x0etaint_\
    multiple\x18\x03\x20\x01(\x08R\rtaintMultiple\"\xde\x01\n\tstd_frame\x12\
    \x18\n\x07address\x18\x01\x20\x02(\x04R\x07address\x12\x1b\n\tthread_id\
    \x18\x02\x20\x02(\x04R\x08threadId\x12\x1a\n\x08rawbytes\x18\x03\x20\x02\
    (\x0cR\x08rawbytes\x12=\n\x10operand_pre_list\x18\x04\x20\x02(\x0b2\x13.\
    operand_value_listR\x0eoperandPreList\x12?\n\x11operand_post_list\x18\
    \x05\x20\x01(\x0b2\x13.operand_value_listR\x0foperandPostList\"\x93\x01\
    \n\rsyscall_frame\x12\x18\n\x07address\x18\x01\x20\x02(\x04R\x07address\
    \x12\x1b\n\tthread_id\x18\x02\x20\x02(\x04R\x08threadId\x12\x16\n\x06num\
    ber\x18\x03\x20\x02(\x04R\x06number\x123\n\rargument_list\x18\x04\x20\
    \x02(\x0b2\x0e.argument_listR\x0cargumentList\"#\n\rargument_list\x12\
    \x12\n\x04elem\x18\x01\x20\x03(\x12R\x04elem\"\x8f\x01\n\x0fexception_fr\
    ame\x12)\n\x10exception_number\x18\x01\x20\x02(\x04R\x0fexceptionNumber\
    \x12\x1b\n\tthread_id\x18\x02\x20\x01(\x04R\x08threadId\x12\x1b\n\tfrom_\
    addr\x18\x03\x20\x01(\x04R\x08fromAddr\x12\x17\n\x07to_addr\x18\x04\x20\
    \x01(\x04R\x06toAddr\"P\n\x11taint_intro_frame\x12;\n\x10taint_intro_lis\
    t\x18\x01\x20\x02(\x0b2\x11.taint_intro_listR\x0etaintIntroList\"4\n\x10\
    taint_intro_list\x12\x20\n\x04elem\x18\x01\x20\x03(\x0b2\x0c.taint_intro\
    R\x04elem\"\x8b\x01\n\x0btaint_intro\x12\x12\n\x04addr\x18\x01\x20\x02(\
    \x04R\x04addr\x12\x19\n\x08taint_id\x18\x02\x20\x02(\x04R\x07taintId\x12\
    \x14\n\x05value\x18\x03\x20\x01(\x0cR\x05value\x12\x1f\n\x0bsource_name\
    \x18\x04\x20\x01(\tR\nsourceName\x12\x16\n\x06offset\x18\x05\x20\x01(\
    \x04R\x06offset\"t\n\rmodload_frame\x12\x1f\n\x0bmodule_name\x18\x01\x20\
    \x02(\tR\nmoduleName\x12\x1f\n\x0blow_address\x18\x02\x20\x02(\x04R\nlow\
    Address\x12!\n\x0chigh_address\x18\x03\x20\x02(\x04R\x0bhighAddress\"N\n\
    \tkey_frame\x12A\n\x12tagged_value_lists\x18\x01\x20\x02(\x0b2\x13.tagge\
    d_value_listsR\x10taggedValueLists\"<\n\x12tagged_value_lists\x12&\n\x04\
    elem\x18\x01\x20\x03(\x0b2\x12.tagged_value_listR\x04elem\"|\n\x11tagged\
    _value_list\x12;\n\x10value_source_tag\x18\x01\x20\x02(\x0b2\x11.value_s\
    ource_tagR\x0evalueSourceTag\x12*\n\nvalue_list\x18\x02\x20\x02(\x0b2\
    \x0b.value_listR\tvalueList\"Q\n\x10value_source_tag\x12\x20\n\x0cno_thr\
    ead_id\x18\x01\x20\x01(\x08R\nnoThreadId\x12\x1b\n\tthread_id\x18\x02\
    \x20\x01(\x04R\x08threadId\"-\n\nvalue_list\x12\x1f\n\x04elem\x18\x01\
    \x20\x03(\x0b2\x0b.value_infoR\x04elem\"\xb9\x01\n\nvalue_info\x12J\n\
    \x15operand_info_specific\x18\x01\x20\x02(\x0b2\x16.operand_info_specifi\
    cR\x13operandInfoSpecific\x12\x1d\n\nbit_length\x18\x02\x20\x02(\x11R\tb\
    itLength\x12*\n\ntaint_info\x18\x03\x20\x01(\x0b2\x0b.taint_infoR\ttaint\
    Info\x12\x14\n\x05value\x18\x04\x20\x02(\x0cR\x05value\"D\n\x0bblock_fra\
    me\x12\x18\n\x07address\x18\x01\x20\x02(\x04R\x07address\x12\x1b\n\tthre\
    ad_id\x18\x02\x20\x02(\x04R\x08threadId\"[\n\ncall_frame\x12\x18\n\x07ad\
    dress\x18\x01\x20\x02(\x04R\x07address\x12\x16\n\x06target\x18\x02\x20\
    \x02(\x04R\x06target\x12\x1b\n\tthread_id\x18\x03\x20\x02(\x04R\x08threa\
    dId\"Z\n\tret_frame\x12\x18\n\x07address\x18\x01\x20\x02(\x04R\x07addres\
    s\x12\x16\n\x06target\x18\x02\x20\x02(\x04R\x06target\x12\x1b\n\tthread_\
    id\x18\x03\x20\x02(\x04R\x08threadIdJ\xab*\n\x07\x12\x05\x01\0\x8f\x01\
    \x01\n\n\n\x02\x04\0\x12\x04\x01\0\x0b\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x01\x08\r\n\x0b\n\x04\x04\0\x02\0\x12\x03\x02\x04%\n\x0c\n\x05\x04\0\
    \x02\0\x04\x12\x03\x02\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x02\r\
    \x16\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x02\x17\x20\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x02#$\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x03\x04-\n\
    \x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x03\x04\x0c\n\x0c\n\x05\x04\0\x02\
    \x01\x06\x12\x03\x03\r\x1a\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x03\x1b\
    (\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x03+,\n\x0b\n\x04\x04\0\x02\x02\
    \x12\x03\x04\x041\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x04\x04\x0c\n\
    \x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x04\r\x1c\n\x0c\n\x05\x04\0\x02\x02\
    \x01\x12\x03\x04\x1d,\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x04/0\n\x0b\
    \n\x04\x04\0\x02\x03\x12\x03\x05\x045\n\x0c\n\x05\x04\0\x02\x03\x04\x12\
    \x03\x05\x04\x0c\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\x05\r\x1e\n\x0c\n\
    \x05\x04\0\x02\x03\x01\x12\x03\x05\x1f0\n\x0c\n\x05\x04\0\x02\x03\x03\
    \x12\x03\x0534\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x06\x04-\n\x0c\n\x05\
    \x04\0\x02\x04\x04\x12\x03\x06\x04\x0c\n\x0c\n\x05\x04\0\x02\x04\x06\x12\
    \x03\x06\r\x1a\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x06\x1b(\n\x0c\n\
    \x05\x04\0\x02\x04\x03\x12\x03\x06+,\n\x0b\n\x04\x04\0\x02\x05\x12\x03\
    \x07\x04%\n\x0c\n\x05\x04\0\x02\x05\x04\x12\x03\x07\x04\x0c\n\x0c\n\x05\
    \x04\0\x02\x05\x06\x12\x03\x07\r\x16\n\x0c\n\x05\x04\0\x02\x05\x01\x12\
    \x03\x07\x17\x20\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x07#$\n\x0b\n\x04\
    \x04\0\x02\x06\x12\x03\x08\x04)\n\x0c\n\x05\x04\0\x02\x06\x04\x12\x03\
    \x08\x04\x0c\n\x0c\n\x05\x04\0\x02\x06\x06\x12\x03\x08\r\x18\n\x0c\n\x05\
    \x04\0\x02\x06\x01\x12\x03\x08\x19$\n\x0c\n\x05\x04\0\x02\x06\x03\x12\
    \x03\x08'(\n\x0b\n\x04\x04\0\x02\x07\x12\x03\t\x04'\n\x0c\n\x05\x04\0\
    \x02\x07\x04\x12\x03\t\x04\x0c\n\x0c\n\x05\x04\0\x02\x07\x06\x12\x03\t\r\
    \x17\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\t\x18\"\n\x0c\n\x05\x04\0\x02\
    \x07\x03\x12\x03\t%&\n\x0b\n\x04\x04\0\x02\x08\x12\x03\n\x04%\n\x0c\n\
    \x05\x04\0\x02\x08\x04\x12\x03\n\x04\x0c\n\x0c\n\x05\x04\0\x02\x08\x06\
    \x12\x03\n\r\x16\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\n\x17\x20\n\x0c\n\
    \x05\x04\0\x02\x08\x03\x12\x03\n#$\n\n\n\x02\x04\x01\x12\x04\r\0\x0f\x01\
    \n\n\n\x03\x04\x01\x01\x12\x03\r\x08\x1a\n\x0b\n\x04\x04\x01\x02\0\x12\
    \x03\x0e\x04#\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x0e\x04\x0c\n\x0c\n\
    \x05\x04\x01\x02\0\x06\x12\x03\x0e\r\x19\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\x0e\x1a\x1e\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0e!\"\n\n\n\
    \x02\x04\x02\x12\x04\x11\0\x17\x01\n\n\n\x03\x04\x02\x01\x12\x03\x11\x08\
    \x14\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x12\x04=\n\x0c\n\x05\x04\x02\x02\
    \0\x04\x12\x03\x12\x04\x0c\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x12\r\"\
    \n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x12#8\n\x0c\n\x05\x04\x02\x02\0\
    \x03\x12\x03\x12;<\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x13\x04#\n\x0c\n\
    \x05\x04\x02\x02\x01\x04\x12\x03\x13\x04\x0c\n\x0c\n\x05\x04\x02\x02\x01\
    \x05\x12\x03\x13\r\x13\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x13\x14\
    \x1e\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x13!\"\n\x0b\n\x04\x04\x02\
    \x02\x02\x12\x03\x14\x04-\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\x03\x14\
    \x04\x0c\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03\x14\r\x1a\n\x0c\n\x05\
    \x04\x02\x02\x02\x01\x12\x03\x14\x1b(\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x03\x14+,\n\x0b\n\x04\x04\x02\x02\x03\x12\x03\x15\x04'\n\x0c\n\x05\
    \x04\x02\x02\x03\x04\x12\x03\x15\x04\x0c\n\x0c\n\x05\x04\x02\x02\x03\x06\
    \x12\x03\x15\r\x17\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\x15\x18\"\n\
    \x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\x15%&\n\x0b\n\x04\x04\x02\x02\x04\
    \x12\x03\x16\x04\x1d\n\x0c\n\x05\x04\x02\x02\x04\x04\x12\x03\x16\x04\x0c\
    \n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x03\x16\r\x12\n\x0c\n\x05\x04\x02\
    \x02\x04\x01\x12\x03\x16\x13\x18\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03\
    \x16\x1b\x1c\n\n\n\x02\x04\x03\x12\x04\x19\0\x1c\x01\n\n\n\x03\x04\x03\
    \x01\x12\x03\x19\x08\x1d\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x1a\x04)\n\
    \x0c\n\x05\x04\x03\x02\0\x04\x12\x03\x1a\x04\x0c\n\x0c\n\x05\x04\x03\x02\
    \0\x06\x12\x03\x1a\r\x18\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x1a\x19$\
    \n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x1a'(\n\x0b\n\x04\x04\x03\x02\x01\
    \x12\x03\x1b\x04)\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03\x1b\x04\x0c\n\
    \x0c\n\x05\x04\x03\x02\x01\x06\x12\x03\x1b\r\x18\n\x0c\n\x05\x04\x03\x02\
    \x01\x01\x12\x03\x1b\x19$\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x1b'(\
    \n\n\n\x02\x04\x04\x12\x04\x1e\0\x20\x01\n\n\n\x03\x04\x04\x01\x12\x03\
    \x1e\x08\x13\n\x0b\n\x04\x04\x04\x02\0\x12\x03\x1f\x04\x1d\n\x0c\n\x05\
    \x04\x04\x02\0\x04\x12\x03\x1f\x04\x0c\n\x0c\n\x05\x04\x04\x02\0\x05\x12\
    \x03\x1f\r\x13\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x1f\x14\x18\n\x0c\n\
    \x05\x04\x04\x02\0\x03\x12\x03\x1f\x1b\x1c\n\n\n\x02\x04\x05\x12\x04\"\0\
    $\x01\n\n\n\x03\x04\x05\x01\x12\x03\"\x08\x13\n\x0b\n\x04\x04\x05\x02\0\
    \x12\x03#\x04\x20\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03#\x04\x0c\n\x0c\n\
    \x05\x04\x05\x02\0\x05\x12\x03#\r\x13\n\x0c\n\x05\x04\x05\x02\0\x01\x12\
    \x03#\x14\x1b\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03#\x1e\x1f\n\n\n\x02\
    \x04\x06\x12\x04&\0+\x01\n\n\n\x03\x04\x06\x01\x12\x03&\x08\x15\n\x0b\n\
    \x04\x04\x06\x02\0\x12\x03'\x04\x1b\n\x0c\n\x05\x04\x06\x02\0\x04\x12\
    \x03'\x04\x0c\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03'\r\x11\n\x0c\n\x05\
    \x04\x06\x02\0\x01\x12\x03'\x12\x16\n\x0c\n\x05\x04\x06\x02\0\x03\x12\
    \x03'\x19\x1a\n\x0b\n\x04\x04\x06\x02\x01\x12\x03(\x04\x1e\n\x0c\n\x05\
    \x04\x06\x02\x01\x04\x12\x03(\x04\x0c\n\x0c\n\x05\x04\x06\x02\x01\x05\
    \x12\x03(\r\x11\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03(\x12\x19\n\x0c\n\
    \x05\x04\x06\x02\x01\x03\x12\x03(\x1c\x1d\n\x0b\n\x04\x04\x06\x02\x02\
    \x12\x03)\x04\x1c\n\x0c\n\x05\x04\x06\x02\x02\x04\x12\x03)\x04\x0c\n\x0c\
    \n\x05\x04\x06\x02\x02\x05\x12\x03)\r\x11\n\x0c\n\x05\x04\x06\x02\x02\
    \x01\x12\x03)\x12\x17\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x03)\x1a\x1b\n\
    \x0b\n\x04\x04\x06\x02\x03\x12\x03*\x04\x1b\n\x0c\n\x05\x04\x06\x02\x03\
    \x04\x12\x03*\x04\x0c\n\x0c\n\x05\x04\x06\x02\x03\x05\x12\x03*\r\x11\n\
    \x0c\n\x05\x04\x06\x02\x03\x01\x12\x03*\x12\x16\n\x0c\n\x05\x04\x06\x02\
    \x03\x03\x12\x03*\x19\x1a\n\n\n\x02\x04\x07\x12\x04-\01\x01\n\n\n\x03\
    \x04\x07\x01\x12\x03-\x08\x12\n\x0b\n\x04\x04\x07\x02\0\x12\x03.\x04\x1f\
    \n\x0c\n\x05\x04\x07\x02\0\x04\x12\x03.\x04\x0c\n\x0c\n\x05\x04\x07\x02\
    \0\x05\x12\x03.\r\x11\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03.\x12\x1a\n\
    \x0c\n\x05\x04\x07\x02\0\x03\x12\x03.\x1d\x1e\n\x0b\n\x04\x04\x07\x02\
    \x01\x12\x03/\x04!\n\x0c\n\x05\x04\x07\x02\x01\x04\x12\x03/\x04\x0c\n\
    \x0c\n\x05\x04\x07\x02\x01\x05\x12\x03/\r\x13\n\x0c\n\x05\x04\x07\x02\
    \x01\x01\x12\x03/\x14\x1c\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03/\x1f\
    \x20\n\x0b\n\x04\x04\x07\x02\x02\x12\x030\x04%\n\x0c\n\x05\x04\x07\x02\
    \x02\x04\x12\x030\x04\x0c\n\x0c\n\x05\x04\x07\x02\x02\x05\x12\x030\r\x11\
    \n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x030\x12\x20\n\x0c\n\x05\x04\x07\
    \x02\x02\x03\x12\x030#$\n\n\n\x02\x04\x08\x12\x043\09\x01\n\n\n\x03\x04\
    \x08\x01\x12\x033\x08\x11\n\x0b\n\x04\x04\x08\x02\0\x12\x034\x04\x20\n\
    \x0c\n\x05\x04\x08\x02\0\x04\x12\x034\x04\x0c\n\x0c\n\x05\x04\x08\x02\0\
    \x05\x12\x034\r\x13\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x034\x14\x1b\n\x0c\
    \n\x05\x04\x08\x02\0\x03\x12\x034\x1e\x1f\n\x0b\n\x04\x04\x08\x02\x01\
    \x12\x035\x04\"\n\x0c\n\x05\x04\x08\x02\x01\x04\x12\x035\x04\x0c\n\x0c\n\
    \x05\x04\x08\x02\x01\x05\x12\x035\r\x13\n\x0c\n\x05\x04\x08\x02\x01\x01\
    \x12\x035\x14\x1d\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x035\x20!\n\x0b\n\
    \x04\x04\x08\x02\x02\x12\x036\x04\x20\n\x0c\n\x05\x04\x08\x02\x02\x04\
    \x12\x036\x04\x0c\n\x0c\n\x05\x04\x08\x02\x02\x05\x12\x036\r\x12\n\x0c\n\
    \x05\x04\x08\x02\x02\x01\x12\x036\x13\x1b\n\x0c\n\x05\x04\x08\x02\x02\
    \x03\x12\x036\x1e\x1f\n\x0b\n\x04\x04\x08\x02\x03\x12\x037\x045\n\x0c\n\
    \x05\x04\x08\x02\x03\x04\x12\x037\x04\x0c\n\x0c\n\x05\x04\x08\x02\x03\
    \x06\x12\x037\r\x1f\n\x0c\n\x05\x04\x08\x02\x03\x01\x12\x037\x200\n\x0c\
    \n\x05\x04\x08\x02\x03\x03\x12\x03734\n\x0b\n\x04\x04\x08\x02\x04\x12\
    \x038\x046\n\x0c\n\x05\x04\x08\x02\x04\x04\x12\x038\x04\x0c\n\x0c\n\x05\
    \x04\x08\x02\x04\x06\x12\x038\r\x1f\n\x0c\n\x05\x04\x08\x02\x04\x01\x12\
    \x038\x201\n\x0c\n\x05\x04\x08\x02\x04\x03\x12\x03845\n\n\n\x02\x04\t\
    \x12\x04;\0@\x01\n\n\n\x03\x04\t\x01\x12\x03;\x08\x15\n\x0b\n\x04\x04\t\
    \x02\0\x12\x03<\x04\x20\n\x0c\n\x05\x04\t\x02\0\x04\x12\x03<\x04\x0c\n\
    \x0c\n\x05\x04\t\x02\0\x05\x12\x03<\r\x13\n\x0c\n\x05\x04\t\x02\0\x01\
    \x12\x03<\x14\x1b\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03<\x1e\x1f\n\x0b\n\
    \x04\x04\t\x02\x01\x12\x03=\x04\"\n\x0c\n\x05\x04\t\x02\x01\x04\x12\x03=\
    \x04\x0c\n\x0c\n\x05\x04\t\x02\x01\x05\x12\x03=\r\x13\n\x0c\n\x05\x04\t\
    \x02\x01\x01\x12\x03=\x14\x1d\n\x0c\n\x05\x04\t\x02\x01\x03\x12\x03=\x20\
    !\n\x0b\n\x04\x04\t\x02\x02\x12\x03>\x04\x1f\n\x0c\n\x05\x04\t\x02\x02\
    \x04\x12\x03>\x04\x0c\n\x0c\n\x05\x04\t\x02\x02\x05\x12\x03>\r\x13\n\x0c\
    \n\x05\x04\t\x02\x02\x01\x12\x03>\x14\x1a\n\x0c\n\x05\x04\t\x02\x02\x03\
    \x12\x03>\x1d\x1e\n\x0b\n\x04\x04\t\x02\x03\x12\x03?\x04-\n\x0c\n\x05\
    \x04\t\x02\x03\x04\x12\x03?\x04\x0c\n\x0c\n\x05\x04\t\x02\x03\x06\x12\
    \x03?\r\x1a\n\x0c\n\x05\x04\t\x02\x03\x01\x12\x03?\x1b(\n\x0c\n\x05\x04\
    \t\x02\x03\x03\x12\x03?+,\n\n\n\x02\x04\n\x12\x04B\0D\x01\n\n\n\x03\x04\
    \n\x01\x12\x03B\x08\x15\n\x0b\n\x04\x04\n\x02\0\x12\x03C\x04\x1d\n\x0c\n\
    \x05\x04\n\x02\0\x04\x12\x03C\x04\x0c\n\x0c\n\x05\x04\n\x02\0\x05\x12\
    \x03C\r\x13\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03C\x14\x18\n\x0c\n\x05\x04\
    \n\x02\0\x03\x12\x03C\x1b\x1c\n\n\n\x02\x04\x0b\x12\x04F\0K\x01\n\n\n\
    \x03\x04\x0b\x01\x12\x03F\x08\x17\n\x0b\n\x04\x04\x0b\x02\0\x12\x03G\x04\
    )\n\x0c\n\x05\x04\x0b\x02\0\x04\x12\x03G\x04\x0c\n\x0c\n\x05\x04\x0b\x02\
    \0\x05\x12\x03G\r\x13\n\x0c\n\x05\x04\x0b\x02\0\x01\x12\x03G\x14$\n\x0c\
    \n\x05\x04\x0b\x02\0\x03\x12\x03G'(\n\x0b\n\x04\x04\x0b\x02\x01\x12\x03H\
    \x04\"\n\x0c\n\x05\x04\x0b\x02\x01\x04\x12\x03H\x04\x0c\n\x0c\n\x05\x04\
    \x0b\x02\x01\x05\x12\x03H\r\x13\n\x0c\n\x05\x04\x0b\x02\x01\x01\x12\x03H\
    \x14\x1d\n\x0c\n\x05\x04\x0b\x02\x01\x03\x12\x03H\x20!\n\x0b\n\x04\x04\
    \x0b\x02\x02\x12\x03I\x04\"\n\x0c\n\x05\x04\x0b\x02\x02\x04\x12\x03I\x04\
    \x0c\n\x0c\n\x05\x04\x0b\x02\x02\x05\x12\x03I\r\x13\n\x0c\n\x05\x04\x0b\
    \x02\x02\x01\x12\x03I\x14\x1d\n\x0c\n\x05\x04\x0b\x02\x02\x03\x12\x03I\
    \x20!\n\x0b\n\x04\x04\x0b\x02\x03\x12\x03J\x04\x20\n\x0c\n\x05\x04\x0b\
    \x02\x03\x04\x12\x03J\x04\x0c\n\x0c\n\x05\x04\x0b\x02\x03\x05\x12\x03J\r\
    \x13\n\x0c\n\x05\x04\x0b\x02\x03\x01\x12\x03J\x14\x1b\n\x0c\n\x05\x04\
    \x0b\x02\x03\x03\x12\x03J\x1e\x1f\n\n\n\x02\x04\x0c\x12\x04M\0O\x01\n\n\
    \n\x03\x04\x0c\x01\x12\x03M\x08\x19\n\x0b\n\x04\x04\x0c\x02\0\x12\x03N\
    \x043\n\x0c\n\x05\x04\x0c\x02\0\x04\x12\x03N\x04\x0c\n\x0c\n\x05\x04\x0c\
    \x02\0\x06\x12\x03N\r\x1d\n\x0c\n\x05\x04\x0c\x02\0\x01\x12\x03N\x1e.\n\
    \x0c\n\x05\x04\x0c\x02\0\x03\x12\x03N12\n\n\n\x02\x04\r\x12\x04Q\0S\x01\
    \n\n\n\x03\x04\r\x01\x12\x03Q\x08\x18\n\x0b\n\x04\x04\r\x02\0\x12\x03R\
    \x04\"\n\x0c\n\x05\x04\r\x02\0\x04\x12\x03R\x04\x0c\n\x0c\n\x05\x04\r\
    \x02\0\x06\x12\x03R\r\x18\n\x0c\n\x05\x04\r\x02\0\x01\x12\x03R\x19\x1d\n\
    \x0c\n\x05\x04\r\x02\0\x03\x12\x03R\x20!\n\n\n\x02\x04\x0e\x12\x04U\0[\
    \x01\n\n\n\x03\x04\x0e\x01\x12\x03U\x08\x13\n\x0b\n\x04\x04\x0e\x02\0\
    \x12\x03V\x04\x1d\n\x0c\n\x05\x04\x0e\x02\0\x04\x12\x03V\x04\x0c\n\x0c\n\
    \x05\x04\x0e\x02\0\x05\x12\x03V\r\x13\n\x0c\n\x05\x04\x0e\x02\0\x01\x12\
    \x03V\x14\x18\n\x0c\n\x05\x04\x0e\x02\0\x03\x12\x03V\x1b\x1c\n\x0b\n\x04\
    \x04\x0e\x02\x01\x12\x03W\x04!\n\x0c\n\x05\x04\x0e\x02\x01\x04\x12\x03W\
    \x04\x0c\n\x0c\n\x05\x04\x0e\x02\x01\x05\x12\x03W\r\x13\n\x0c\n\x05\x04\
    \x0e\x02\x01\x01\x12\x03W\x14\x1c\n\x0c\n\x05\x04\x0e\x02\x01\x03\x12\
    \x03W\x1f\x20\n\x0b\n\x04\x04\x0e\x02\x02\x12\x03X\x04\x1d\n\x0c\n\x05\
    \x04\x0e\x02\x02\x04\x12\x03X\x04\x0c\n\x0c\n\x05\x04\x0e\x02\x02\x05\
    \x12\x03X\r\x12\n\x0c\n\x05\x04\x0e\x02\x02\x01\x12\x03X\x13\x18\n\x0c\n\
    \x05\x04\x0e\x02\x02\x03\x12\x03X\x1b\x1c\n\x0b\n\x04\x04\x0e\x02\x03\
    \x12\x03Y\x04$\n\x0c\n\x05\x04\x0e\x02\x03\x04\x12\x03Y\x04\x0c\n\x0c\n\
    \x05\x04\x0e\x02\x03\x05\x12\x03Y\r\x13\n\x0c\n\x05\x04\x0e\x02\x03\x01\
    \x12\x03Y\x14\x1f\n\x0c\n\x05\x04\x0e\x02\x03\x03\x12\x03Y\"#\n\x0b\n\
    \x04\x04\x0e\x02\x04\x12\x03Z\x04\x1f\n\x0c\n\x05\x04\x0e\x02\x04\x04\
    \x12\x03Z\x04\x0c\n\x0c\n\x05\x04\x0e\x02\x04\x05\x12\x03Z\r\x13\n\x0c\n\
    \x05\x04\x0e\x02\x04\x01\x12\x03Z\x14\x1a\n\x0c\n\x05\x04\x0e\x02\x04\
    \x03\x12\x03Z\x1d\x1e\n\n\n\x02\x04\x0f\x12\x04]\0a\x01\n\n\n\x03\x04\
    \x0f\x01\x12\x03]\x08\x15\n\x0b\n\x04\x04\x0f\x02\0\x12\x03^\x04$\n\x0c\
    \n\x05\x04\x0f\x02\0\x04\x12\x03^\x04\x0c\n\x0c\n\x05\x04\x0f\x02\0\x05\
    \x12\x03^\r\x13\n\x0c\n\x05\x04\x0f\x02\0\x01\x12\x03^\x14\x1f\n\x0c\n\
    \x05\x04\x0f\x02\0\x03\x12\x03^\"#\n\x0b\n\x04\x04\x0f\x02\x01\x12\x03_\
    \x04$\n\x0c\n\x05\x04\x0f\x02\x01\x04\x12\x03_\x04\x0c\n\x0c\n\x05\x04\
    \x0f\x02\x01\x05\x12\x03_\r\x13\n\x0c\n\x05\x04\x0f\x02\x01\x01\x12\x03_\
    \x14\x1f\n\x0c\n\x05\x04\x0f\x02\x01\x03\x12\x03_\"#\n\x0b\n\x04\x04\x0f\
    \x02\x02\x12\x03`\x04%\n\x0c\n\x05\x04\x0f\x02\x02\x04\x12\x03`\x04\x0c\
    \n\x0c\n\x05\x04\x0f\x02\x02\x05\x12\x03`\r\x13\n\x0c\n\x05\x04\x0f\x02\
    \x02\x01\x12\x03`\x14\x20\n\x0c\n\x05\x04\x0f\x02\x02\x03\x12\x03`#$\n\n\
    \n\x02\x04\x10\x12\x04c\0e\x01\n\n\n\x03\x04\x10\x01\x12\x03c\x08\x11\n\
    \x0b\n\x04\x04\x10\x02\0\x12\x03d\x047\n\x0c\n\x05\x04\x10\x02\0\x04\x12\
    \x03d\x04\x0c\n\x0c\n\x05\x04\x10\x02\0\x06\x12\x03d\r\x1f\n\x0c\n\x05\
    \x04\x10\x02\0\x01\x12\x03d\x202\n\x0c\n\x05\x04\x10\x02\0\x03\x12\x03d5\
    6\n\n\n\x02\x04\x11\x12\x04g\0i\x01\n\n\n\x03\x04\x11\x01\x12\x03g\x08\
    \x1a\n\x0b\n\x04\x04\x11\x02\0\x12\x03h\x04(\n\x0c\n\x05\x04\x11\x02\0\
    \x04\x12\x03h\x04\x0c\n\x0c\n\x05\x04\x11\x02\0\x06\x12\x03h\r\x1e\n\x0c\
    \n\x05\x04\x11\x02\0\x01\x12\x03h\x1f#\n\x0c\n\x05\x04\x11\x02\0\x03\x12\
    \x03h&'\n\n\n\x02\x04\x12\x12\x04k\0n\x01\n\n\n\x03\x04\x12\x01\x12\x03k\
    \x08\x19\n\x0b\n\x04\x04\x12\x02\0\x12\x03l\x043\n\x0c\n\x05\x04\x12\x02\
    \0\x04\x12\x03l\x04\x0c\n\x0c\n\x05\x04\x12\x02\0\x06\x12\x03l\r\x1d\n\
    \x0c\n\x05\x04\x12\x02\0\x01\x12\x03l\x1e.\n\x0c\n\x05\x04\x12\x02\0\x03\
    \x12\x03l12\n\x0b\n\x04\x04\x12\x02\x01\x12\x03m\x04'\n\x0c\n\x05\x04\
    \x12\x02\x01\x04\x12\x03m\x04\x0c\n\x0c\n\x05\x04\x12\x02\x01\x06\x12\
    \x03m\r\x17\n\x0c\n\x05\x04\x12\x02\x01\x01\x12\x03m\x18\"\n\x0c\n\x05\
    \x04\x12\x02\x01\x03\x12\x03m%&\n\n\n\x02\x04\x13\x12\x04p\0s\x01\n\n\n\
    \x03\x04\x13\x01\x12\x03p\x08\x18\n\x0b\n\x04\x04\x13\x02\0\x12\x03q\x04\
    #\n\x0c\n\x05\x04\x13\x02\0\x04\x12\x03q\x04\x0c\n\x0c\n\x05\x04\x13\x02\
    \0\x05\x12\x03q\r\x11\n\x0c\n\x05\x04\x13\x02\0\x01\x12\x03q\x12\x1e\n\
    \x0c\n\x05\x04\x13\x02\0\x03\x12\x03q!\"\n\x0b\n\x04\x04\x13\x02\x01\x12\
    \x03r\x04\"\n\x0c\n\x05\x04\x13\x02\x01\x04\x12\x03r\x04\x0c\n\x0c\n\x05\
    \x04\x13\x02\x01\x05\x12\x03r\r\x13\n\x0c\n\x05\x04\x13\x02\x01\x01\x12\
    \x03r\x14\x1d\n\x0c\n\x05\x04\x13\x02\x01\x03\x12\x03r\x20!\n\n\n\x02\
    \x04\x14\x12\x04u\0w\x01\n\n\n\x03\x04\x14\x01\x12\x03u\x08\x12\n\x0b\n\
    \x04\x04\x14\x02\0\x12\x03v\x04!\n\x0c\n\x05\x04\x14\x02\0\x04\x12\x03v\
    \x04\x0c\n\x0c\n\x05\x04\x14\x02\0\x06\x12\x03v\r\x17\n\x0c\n\x05\x04\
    \x14\x02\0\x01\x12\x03v\x18\x1c\n\x0c\n\x05\x04\x14\x02\0\x03\x12\x03v\
    \x1f\x20\n\n\n\x02\x04\x15\x12\x04y\0~\x01\n\n\n\x03\x04\x15\x01\x12\x03\
    y\x08\x12\n\x0b\n\x04\x04\x15\x02\0\x12\x03z\x04=\n\x0c\n\x05\x04\x15\
    \x02\0\x04\x12\x03z\x04\x0c\n\x0c\n\x05\x04\x15\x02\0\x06\x12\x03z\r\"\n\
    \x0c\n\x05\x04\x15\x02\0\x01\x12\x03z#8\n\x0c\n\x05\x04\x15\x02\0\x03\
    \x12\x03z;<\n\x0b\n\x04\x04\x15\x02\x01\x12\x03{\x04#\n\x0c\n\x05\x04\
    \x15\x02\x01\x04\x12\x03{\x04\x0c\n\x0c\n\x05\x04\x15\x02\x01\x05\x12\
    \x03{\r\x13\n\x0c\n\x05\x04\x15\x02\x01\x01\x12\x03{\x14\x1e\n\x0c\n\x05\
    \x04\x15\x02\x01\x03\x12\x03{!\"\n\x0b\n\x04\x04\x15\x02\x02\x12\x03|\
    \x04'\n\x0c\n\x05\x04\x15\x02\x02\x04\x12\x03|\x04\x0c\n\x0c\n\x05\x04\
    \x15\x02\x02\x06\x12\x03|\r\x17\n\x0c\n\x05\x04\x15\x02\x02\x01\x12\x03|\
    \x18\"\n\x0c\n\x05\x04\x15\x02\x02\x03\x12\x03|%&\n\x0b\n\x04\x04\x15\
    \x02\x03\x12\x03}\x04\x1d\n\x0c\n\x05\x04\x15\x02\x03\x04\x12\x03}\x04\
    \x0c\n\x0c\n\x05\x04\x15\x02\x03\x05\x12\x03}\r\x12\n\x0c\n\x05\x04\x15\
    \x02\x03\x01\x12\x03}\x13\x18\n\x0c\n\x05\x04\x15\x02\x03\x03\x12\x03}\
    \x1b\x1c\n\x0c\n\x02\x04\x16\x12\x06\x80\x01\0\x83\x01\x01\n\x0b\n\x03\
    \x04\x16\x01\x12\x04\x80\x01\x08\x13\n\x0c\n\x04\x04\x16\x02\0\x12\x04\
    \x81\x01\x04\x20\n\r\n\x05\x04\x16\x02\0\x04\x12\x04\x81\x01\x04\x0c\n\r\
    \n\x05\x04\x16\x02\0\x05\x12\x04\x81\x01\r\x13\n\r\n\x05\x04\x16\x02\0\
    \x01\x12\x04\x81\x01\x14\x1b\n\r\n\x05\x04\x16\x02\0\x03\x12\x04\x81\x01\
    \x1e\x1f\n\x0c\n\x04\x04\x16\x02\x01\x12\x04\x82\x01\x04\"\n\r\n\x05\x04\
    \x16\x02\x01\x04\x12\x04\x82\x01\x04\x0c\n\r\n\x05\x04\x16\x02\x01\x05\
    \x12\x04\x82\x01\r\x13\n\r\n\x05\x04\x16\x02\x01\x01\x12\x04\x82\x01\x14\
    \x1d\n\r\n\x05\x04\x16\x02\x01\x03\x12\x04\x82\x01\x20!\n\x0c\n\x02\x04\
    \x17\x12\x06\x85\x01\0\x89\x01\x01\n\x0b\n\x03\x04\x17\x01\x12\x04\x85\
    \x01\x08\x12\n\x0c\n\x04\x04\x17\x02\0\x12\x04\x86\x01\x04\x20\n\r\n\x05\
    \x04\x17\x02\0\x04\x12\x04\x86\x01\x04\x0c\n\r\n\x05\x04\x17\x02\0\x05\
    \x12\x04\x86\x01\r\x13\n\r\n\x05\x04\x17\x02\0\x01\x12\x04\x86\x01\x14\
    \x1b\n\r\n\x05\x04\x17\x02\0\x03\x12\x04\x86\x01\x1e\x1f\n\x0c\n\x04\x04\
    \x17\x02\x01\x12\x04\x87\x01\x04\x1f\n\r\n\x05\x04\x17\x02\x01\x04\x12\
    \x04\x87\x01\x04\x0c\n\r\n\x05\x04\x17\x02\x01\x05\x12\x04\x87\x01\r\x13\
    \n\r\n\x05\x04\x17\x02\x01\x01\x12\x04\x87\x01\x14\x1a\n\r\n\x05\x04\x17\
    \x02\x01\x03\x12\x04\x87\x01\x1d\x1e\n\x0c\n\x04\x04\x17\x02\x02\x12\x04\
    \x88\x01\x04\"\n\r\n\x05\x04\x17\x02\x02\x04\x12\x04\x88\x01\x04\x0c\n\r\
    \n\x05\x04\x17\x02\x02\x05\x12\x04\x88\x01\r\x13\n\r\n\x05\x04\x17\x02\
    \x02\x01\x12\x04\x88\x01\x14\x1d\n\r\n\x05\x04\x17\x02\x02\x03\x12\x04\
    \x88\x01\x20!\n\x0c\n\x02\x04\x18\x12\x06\x8b\x01\0\x8f\x01\x01\n\x0b\n\
    \x03\x04\x18\x01\x12\x04\x8b\x01\x08\x11\n\x0c\n\x04\x04\x18\x02\0\x12\
    \x04\x8c\x01\x04\x20\n\r\n\x05\x04\x18\x02\0\x04\x12\x04\x8c\x01\x04\x0c\
    \n\r\n\x05\x04\x18\x02\0\x05\x12\x04\x8c\x01\r\x13\n\r\n\x05\x04\x18\x02\
    \0\x01\x12\x04\x8c\x01\x14\x1b\n\r\n\x05\x04\x18\x02\0\x03\x12\x04\x8c\
    \x01\x1e\x1f\n\x0c\n\x04\x04\x18\x02\x01\x12\x04\x8d\x01\x04\x1f\n\r\n\
    \x05\x04\x18\x02\x01\x04\x12\x04\x8d\x01\x04\x0c\n\r\n\x05\x04\x18\x02\
    \x01\x05\x12\x04\x8d\x01\r\x13\n\r\n\x05\x04\x18\x02\x01\x01\x12\x04\x8d\
    \x01\x14\x1a\n\r\n\x05\x04\x18\x02\x01\x03\x12\x04\x8d\x01\x1d\x1e\n\x0c\
    \n\x04\x04\x18\x02\x02\x12\x04\x8e\x01\x04\"\n\r\n\x05\x04\x18\x02\x02\
    \x04\x12\x04\x8e\x01\x04\x0c\n\r\n\x05\x04\x18\x02\x02\x05\x12\x04\x8e\
    \x01\r\x13\n\r\n\x05\x04\x18\x02\x02\x01\x12\x04\x8e\x01\x14\x1d\n\r\n\
    \x05\x04\x18\x02\x02\x03\x12\x04\x8e\x01\x20!\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
